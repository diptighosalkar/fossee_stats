<?php

function fossee_stats_permission()
{
    return array(
        "access fossee_stats" => array(
            "title" => t("Access fossee_stats"),
            "description" => t("Allows users to view fossee stats.")
        ),
        "view workshop" => array(
            "title" => t("View Workshop"),
            "description" => t("Allows users to view past workshop.")
        ),
        "manage past workshop" => array(
            "title" => t("Manage Past Workshop"),
            "description" => t("Allows users to manage past workshop.")
        )
    );
}

function fossee_stats_menu()
{
    $items = array();
    $items["fossee-stats"] = array(
        "title" => "FOSSEE STATS",
        "page callback" => "drupal_get_form",
        "page arguments" => array(
            "fossee_stats_form"
        ),
        "access arguments" => array(
            "access fossee_stats"
        ),
        "type" => MENU_NORMAL_ITEM
    );
    $items['city/autocomplete/%'] = array(
        'page callback' => '_city_name_autocomplete',
        'page arguments' => array(
            5
        ),
        'access arguments' => array(
            'access fossee_stats'
        ),
        'type' => MENU_CALLBACK
    );
    $items['state/autocomplete/%'] = array(
        'page callback' => '_state_name_autocomplete',
        'page arguments' => array(
            4
        ),
        'access arguments' => array(
            'access fossee_stats'
        ),
        'type' => MENU_CALLBACK
    );
    //Following are menu of Events
    $items["events"] = array(
        "title" => "Events",
        "page callback" => "workshop_view_all",
        "access arguments" => array(
            "view workshop"
        ),
        "type" => MENU_CALLBACK
    );
    $items["events/add"] = array(
        "title" => "Add Events",
        "page callback" => "workshop_display_all",
        "access arguments" => array(
            "manage past workshop"
        ),
        "type" => MENU_CALLBACK
    );
    $items["events/edit"] = array(
        "title" => "Edit Events",
        "page callback" => "workshop_edit_all",
        "access arguments" => array(
            "manage past workshop"
        ),
        "type" => MENU_CALLBACK
    );
    $items["events/delete"] = array(
        "title" => "Delete Events",
        "page callback" => "workshop_delete_all",
        "access arguments" => array(
            "manage past workshop"
        ),
        "type" => MENU_CALLBACK
    );
    $items["events/view_details"] = array(
        "title" => "Details of Selected Event",
        "page callback" => "workshop_view_details_all",
        "access arguments" => array(
            "view workshop"
        ),
        "type" => MENU_CALLBACK
    );
    $items["events/images"] = array(
        "title" => "Event's Images",
        "page callback" => "workshop_view_image_all",
        "access arguments" => array(
            "view workshop"
        ),
        "type" => MENU_CALLBACK
    );
    $items["events/images/change"] = array(
        "title" => "Event's Images",
        "page callback" => "workshop_view_image_change",
        "access arguments" => array(
            "view workshop"
        ),
        "type" => MENU_CALLBACK
    );
    $items["events/testimonials"] = array(
        //"title" => "Testimonials",
        "page callback" => "workshop_view_all_testimonials",
        "access arguments" => array(
            "view workshop"
        ),
        "type" => MENU_CALLBACK
    );
    $items["events/testimonials/view"] = array(
        "title" => "Testimonial",
        "page callback" => "workshop_view_selected_testimonial",
        "access arguments" => array(
            "view workshop"
        ),
        "type" => MENU_CALLBACK
    );
    $items["events/upcoming"] = array(
        "title" => "View Upcoming Events",
        "page callback" => "workshop_view_upcoming_all",
        "access arguments" => array(
            "view upcoming workshop"
        ),
        "type" => MENU_CALLBACK
    );
    /* ADMIN SETTINGS */
    $items['admin/settings/events'] = array(
        'title' => 'Events Settings',
        'description' => 'Events Settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'events_settings_form'
        ),
        'access arguments' => array(
            'administer events'
        ),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'settings.inc'
    );
    return $items;
}


function fossee_stats_form($form, &$form_state)
{
    $options_first = _ajax_example_get_first_dropdown_options();
    if (isset($form_state['values']['foss_sub_project']) && isset($form_state['values']['foss_type']) && isset($form_state['values']['foss_sub_project_status'])) {
        $foss_project = isset($form_state['values']['foss_type']) ? $form_state['values']['foss_type'] : key($options_first);
    } else {
        $foss_project = '';
    }
    $form['foss_type'] = array(
        '#type' => 'select',
        '#prefix' => '<div class="content"><div><table><tr><td>',
        '#suffix' => '</td>',
        '#title' => t('FOSS Type'),
        '#multiple' => false,
        '#options' => $options_first,
        //'#default_value' => $foss_project,
        '#validated' => TRUE,
        '#ajax' => array(
            'callback' => 'ajax_foss_type_dependent_dropdown_callback',
            'wrapper' => 'dropdown-second-replace',
            'progress' => array(
                'message' => ''
            )
        )
    );
    if (isset($form_state['values']['foss_sub_project']) && isset($form_state['values']['foss_type']) && isset($form_state['values']['foss_sub_project_status'])) {
        $foss_sub_project = isset($form_state['values']['foss_sub_project']) ? $form_state['values']['foss_sub_project'] : key(get_activities_list($foss_project));
    } else {
        $foss_sub_project = '';
    }
    $form['foss_sub_project'] = array(
        '#type' => 'select',
        '#title' => t('Activities'),
        '#options' => get_activities_list($foss_project),
        '#prefix' => '<td><div id="dropdown-second-replace" style="width:250px;padding-left:25px" >',
        '#suffix' => '</div>',
        '#default_value' => "--------------",
        '#validated' => TRUE,
        '#ajax' => array(
            'callback' => 'ajax_foss_sub_project_dependent_dropdown_callback',
            'wrapper' => 'dropdown-third-replace',
            'progress' => array(
                'message' => ''
            )
        ),

	'#states' => array(
            'invisible' => array(
                ':input[name="foss_type"]' => array(
                    'value' => ""
                )
            )
        )
    );
    if (isset($form_state['values']['foss_sub_project']) && isset($form_state['values']['foss_type']) && isset($form_state['values']['foss_sub_project_status'])) {
        $foss_sub_project_status = isset($form_state['values']['$foss_sub_project_status']) ? $form_state['values']['$foss_sub_project_status'] : '';
    } else {
        $foss_sub_project_status = '';
    }
    $form['foss_sub_project_status'] = array(
        '#type' => 'select',
        '#title' => t('Status'),
        '#options' => _ajax_example_get_third_dropdown_options($foss_sub_project),
        '#prefix' => '<td><div id="dropdown-third-replace" style="width:250px">',
        '#suffix' => '</div></td></tr>',
        '#default_value' => $foss_sub_project_status,
        '#validated' => TRUE,
        '#states' => array(
            'invisible' => array(
                array(
                    array(
                        ':input[name="foss_sub_project"]' => array(
                            'value' => 0
                        )
                    ),
                    'or',
                    array(
                        ':input[name="foss_type"]' => array(
                            'value' => ""
                        )
                    )
                )
            )
        )
    );
    $form['start_date'] = array(
        '#type' => 'date_popup',
        '#title' => t('From Date:'),
        '#date_label_position' => '',
        '#description' => '',
        '#default_value' => '',
        '#date_format' => 'Y-m-d',
        '#date_increment' => 0,
        '#date_year_range' => '2011:+0',
        '#prefix' => '<tr><td><div id="startdate">',
        '#suffix' => '</div></td>',
        '#datepicker_options' => array(
            'maxDate' => 0
        ),
        '#states' => array(
            'invisible' => array(
                ':input[name="foss_type"]' => array(
                    'value' => ""
                )
            )
        )
    );
    $form['end_date'] = array(
        '#type' => 'date_popup',
        '#title' => t('To Date:'),
        '#date_label_position' => '',
        '#description' => '',
        '#default_value' => '',
        '#date_format' => 'Y-m-d',
        '#date_increment' => 0,
        '#date_year_range' => '2011:+0',
        '#prefix' => '<td><div id="enddate" style="padding-left:15px;">',
        '#suffix' => '</div></td>',
        '#datepicker_options' => array(
            'maxDate' => 0
        ),
        '#states' => array(
            'invisible' => array(
                ':input[name="foss_type"]' => array(
                    'value' => ""
                )
            )
        )
    );
    
    if (isset($form_state['values']['countryname']) && isset($form_state['values']['statename']) && isset($form_state['values']['cityname'])) {
        $countryname = isset($form_state['values']['countryname']) ? $form_state['values']['countryname'] : key(get_country_list($foss_project,$foss_sub_project));
    } else {
        $countryname = '';
    }
    $form['countryname'] = array(
        "#type" => "select",
        "#title" => t("Select Country"),
        '#prefix' => '<td><div style="width:200px;" id= "load_country">',
        '#suffix' => '</div></td></tr>',
        '#options' => get_country_list($foss_project,$foss_sub_project),
        '#states' => array(
            'invisible' => array(
                ':input[name="foss_sub_project"]' => array(
                    'value' => 0
                )
            )
        ),
        '#ajax' => array(
            'callback' => 'ajax_state_list_dependent_dropdown_callback',
            'wrapper' => 'load_state',
            'progress' => array(
                'message' => ''
            )
        )
    );
    
    if (isset($form_state['values']['countryname']) && isset($form_state['values']['statename']) && isset($form_state['values']['cityname'])) {
        $statename = isset($form_state['values']['statename']) ? $form_state['values']['statename'] : key(get_state_list($foss_project, $foss_sub_project, $countryname));
    } else {
        $statename = '';
    }
    
    $form['statename'] = array(
        "#type" => "select",
        "#title" => t("State Name"),
        '#validated' => TRUE,
        '#options' => get_state_list($foss_project, $foss_sub_project, $countryname),
        '#prefix' => '<tr><td><div style="width:150px;" id= "load_state">',
        '#suffix' => '</div></td>',
        '#states' => array(
            'invisible' => array(
                ':input[name="foss_sub_project"]' => array(
                    'value' => 0
                )
            )
        ),
        '#ajax' => array(
            'callback' => 'ajax_city_list_dependent_dropdown_callback',
            'wrapper' => 'load_state',
            'progress' => array(
                'message' => ''
            )
        )
    );
    
    if (isset($form_state['values']['countryname']) && isset($form_state['values']['statename']) && isset($form_state['values']['cityname'])) {
        $cityname = isset($form_state['values']['cityname']) ? $form_state['values']['cityname'] : key(get_city_list($foss_project, $foss_sub_project, $countryname, $statename));
    } else {
        $cityname = '';
    }
    $form['cityname'] = array(
        "#type" => "select",
        "#title" => t("City Name"),
        '#validated' => TRUE,
        '#options' => get_city_list($foss_project, $foss_sub_project, $countryname, $statename),
        '#prefix' => '<td><div style="width:200px ;padding-left:30px;" id= "load_city">',
        '#suffix' => '</div></td></tr>',
        '#states' => array(
            'invisible' => array(
                ':input[name="foss_sub_project"]' => array(
                    'value' => 0
                )
            )
        )
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#ajax' => array(
            'callback' => 'ajax_example_submit_driven_callback',
            'progress' => array(
                'message' => ''
            )
        ),
        '#value' => t('Filter'),
        '#attributes' => array(
            'style' => 'width:100px;background-color:#4F4C14;color:#fff'
        ),
        '#prefix' => '<tr><td></td><td align="center">',
        '#suffix' => '</td>'
    );
    $form['reset'] = array(
        '#type' => 'submit',
        '#value' => t('Reset'),
        '#attributes' => array(
            'style' => 'width:100px;background-color:#4F4C14;color:#fff'
        ),
        '#prefix' => '<td align="left">',
        '#suffix' => '</td></tr></table></div>'
    );
    $form['displaytext'] = array(
        '#type' => 'markup',
        '#prefix' => '<div><div id="displaytext" style="font-weight:bold;padding-top:10px">',
        '#suffix' => '</div></div>',
        '#markup' => ''
    );
    $form['tbctable'] = array(
        '#type' => 'item',
        '#prefix' => '<div id="default_load" class="tab-previews">',
        '#markup' => '<div class="tab-preview">
       					<input type="radio" id="tab-1" name="tab-group-1" checked>
       					<label for="tab-1">Textbook Companion</label>
      				 	<div class="tabcontent"><div id="tbctabledata"   						style="float:left;width:280px;height:200px">' . get_tabledata_TBC_or_LM("TBC", "1960/01/01", "")
    );
    $TBC_getchart = getchart("TBC");
    $form['tbcchart'] = array(
        '#type' => 'item',
        '#markup' => '<div id="tbcchartdata" style="float:left;width:250px;height:200px;">' . drupal_render($TBC_getchart) . '</div></div></div></div>'
    );
    $form['lmtable'] = array(
        '#type' => 'item',
        '#markup' => '<div class="tab-preview">
       			<input type="radio" id="tab-2" name="tab-group-1">
       			<label for="tab-2">Lab Migration</label>
       			<div class="tabcontent"><div id="lmtabledata" style="float:left;width:280px;height:200px">' . get_tabledata_TBC_or_LM("LM", "1960/01/01", "")
    );
    $LM_getchart = getchart("LM");
    $form['lmchart'] = array(
        '#type' => 'item',
        '#markup' => '<div id="lmchartdata" style="float:left;width:250px;height:200px;">' . drupal_render($LM_getchart) . '</div></div></div></div>'
        //'#suffix'=>'</div>',
    );
    /*This is for workshop and others */
    $form['workshoptable'] = array(
        '#type' => 'item',
        '#markup' => '<div class="tab-preview">
       					<input type="radio" id="tab-3" name="tab-group-1" >
       					<label for="tab-3">Workshop</label>
      				 	<div class="tabcontent"><div id="workshopdata">' . workshop_view_all(0, "", ""),
        '#suffix' => '</div></div></div>'
    );
    $form['selfworkshoptable'] = array(
        '#type' => 'item',
        '#markup' => '<div class="tab-preview">
       					<input type="radio" id="tab-4" name="tab-group-1" >
       					<label for="tab-4">Self Workshop</label>
      				 	<div class="tabcontent"><div id="selfworkshopdata">',
        '#suffix' => '</div></div></div>'
    );
    $form['conferencetable'] = array(
        '#type' => 'item',
        '#markup' => '<div class="tab-preview">
       					<input type="radio" id="tab-5" name="tab-group-1" >
       					<label for="tab-5">Conference/Seminar</label>
      				 	<div class="tabcontent"><div id="conferencedata">' . conference_seminar_view_all(0, "", ""),
        '#suffix' => '</div></div></div>'
    );
    $form['spokentutorialtable'] = array(
        '#type' => 'item',
        '#markup' => '<div class="tab-preview">
       					<input type="radio" id="tab-6" name="tab-group-1" >
       					<label for="tab-6">Spoken Tutorial</label>
      				 	<div class="tabcontent"><div id="spokentutorialdata">',
        '#suffix' => '</div></div></div>'
    );
    $form['postalcampaignstable'] = array(
        '#type' => 'item',
        '#markup' => '<div class="tab-preview">
       					<input type="radio" id="tab-7" name="tab-group-1" >
       					<label for="tab-7">Postal Campaigns</label>
      				 	<div class="tabcontent"><div id="postalcampaignsdata">',
        '#suffix' => '</div></div></div>'
    );
    $form['lastdiv'] = array(
        '#type' => 'item',
        '#markup' => '',
        '#suffix' => '</div>'
    );
    return $form;
}


function getchart($sub_type)
{
    $title = "";
    if ($sub_type == "TBC") {
        $title = "Textbook Companion Statictics";
    } else {
        $title = "Lab Migration Statistics";
    }
    $chart = array(
        '#type' => 'chart',
        '#title' => t($title),
        '#chart_type' => 'pie',
        '#chart_library' => 'google',
        '#legend_position' => 'right',
        '#data_labels' => TRUE,
        '#tooltips' => TRUE,
        '#width' => 500
    );
    $chart['pie_data'] = array(
        '#type' => 'chart_data',
        '#title' => t($title),
        '#data' => get_data_for_chart_allproject($sub_type)
    );
    $example['chart'] = $chart;
    return $example;
}


function getchartforselectedProject($foss_type, $sub_type, $startdate, $enddate, $extrafilter)
{
    $title = "";
    if ($sub_type == "TBC") {
        $title = $foss_type . "" . "'s Textbook Companion Statictics";
    } else {
        $title = $foss_type . "" . "'s Lab Migration Statistics";
    }
    $chart = array(
        '#type' => 'chart',
        '#title' => t($title),
        '#chart_type' => 'pie',
        '#chart_library' => 'google',
        '#legend_position' => 'right',
        '#data_labels' => TRUE,
        '#tooltips' => TRUE,
        '#width' => 450
    );
    $chart['pie_data'] = array(
        '#type' => 'chart_data',
        '#title' => t($title),
        '#data' => get_data_for_chart_selectedproject($foss_type, $sub_type, $startdate, $enddate, $extrafilter)
    );
    $example['chart'] = $chart;
    return $example;
}


function get_data_for_chart_allproject($sub_type)
{
    $rows = array();
    if ($sub_type == "TBC") {
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'id'
        ));
        $query->fields('foss_type', array(
            'foss_name'
        ));
        $query->fields('foss_type', array(
            'tbc'
        ));
        $query->condition('tbc', 1);
        $result = $query->execute();
        while ($foss_detail = $result->fetchObject()) {
            if ($foss_detail->foss_name != null) {
                if ($foss_detail->foss_name != 'Python') {
                    db_set_active($foss_detail->foss_name); //Active other database
                    //For TBC
                    if ($foss_detail->foss_name != 'eSim' && $foss_detail->foss_name != 'OpenFOAM' && $foss_detail->foss_name != 'OR-Tools') {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.category>0");
                    } else {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1");
                    }
                    db_set_active('default'); // We need to call the main (drupal) db back
                    db_set_active();
                    $completedbookcount = $query2->fetchObject()->book_count;
                    $option1 = array(
                        $foss_detail->foss_name,
                        (int) $completedbookcount
                    );
                    array_push($rows, $option1);
                } else {
                    db_set_active($foss_detail->foss_name); //Active other database
                    $query2 = db_select('tbc_book');
                    $query2->addExpression('count(*)', 'count');
                    $query2->condition('approved', 1);
                    $result2 = $query2->execute();
                    db_set_active('default'); // We need to call the main (drupal) db back
                    db_set_active();
                    $completedbookcount = $result2->fetchObject()->count;
                    $option1 = array(
                        $foss_detail->foss_name,
                        (int) $completedbookcount
                    );
                    array_push($rows, $option1);
                }
            }
        }
    } else {
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'id'
        ));
        $query->fields('foss_type', array(
            'foss_name'
        ));
        $query->fields('foss_type', array(
            'lab_migration'
        ));
        $query->condition('lab_migration', 1);
        $result = $query->execute();
        while ($foss_detail = $result->fetchObject()) {
            if ($foss_detail->foss_name != null) {
                db_set_active($foss_detail->foss_name); //Active other database
                //For LM
                $query3 = db_select('lab_migration_proposal');
                $query3->addExpression('count(*)', 'count');
                $query3->condition('approval_status', 3);
                $result3 = $query3->execute();
                db_set_active('default'); // We need to call the main (drupal) db back
                db_set_active();
                $completedlabcount = $result3->fetchObject()->count;
                $option1 = array(
                    $foss_detail->foss_name,
                    (int) $completedlabcount
                );
                array_push($rows, $option1);
            }
        }
    }
    return $rows;
}


function get_data_for_chart_selectedproject($foss_type, $sub_type, $startdate, $enddate, $extrafilter)
{
    if ($enddate == "") {
        $enddate = date("Y-m-d");
    }
    $rows = array();
    if ($sub_type == "TBC") {
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'id'
        ));
        $query->fields('foss_type', array(
            'foss_name'
        ));
        $query->fields('foss_type', array(
            'tbc'
        ));
        $query->condition('tbc', 1);
        $query->condition('foss_name', $foss_type);
        $result = $query->execute();
        $foss_detail = $result->fetchObject();
        if ($foss_detail->foss_name != null) {
            if ($foss_detail->foss_name != 'Python') {
                $rows = array();
                db_set_active($foss_detail->foss_name); //Active other database
                //For TBC
                if ($foss_detail->foss_name != 'eSim' && $foss_detail->foss_name != 'OpenFOAM' && $foss_detail->foss_name != 'OR-Tools') {
                    if ($foss_detail->foss_name != 'DWSIM') {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                        $query3 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    } else {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.actual_completion_date) >= :startdate AND FROM_UNIXTIME(po.actual_completion_date) <= :enddate ", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                        $query3 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.actual_completion_date) >= :startdate AND FROM_UNIXTIME(po.actual_completion_date) <= :enddate", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    }
                } else {
                    $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                        ':value' => "%" . db_like($extrafilter) . "%",
                        ':startdate' => $startdate,
                        ':enddate' => $enddate
                    ));
                    $query3 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                        ':value' => "%" . db_like($extrafilter) . "%",
                        ':startdate' => $startdate,
                        ':enddate' => $enddate
                    ));
                }
                db_set_active('default'); // We need to call the main (drupal) db back
                db_set_active();
                $completedbookcount = $query2->fetchObject()->book_count;
                $pendingbookcount = $query3->fetchObject()->book_count;
                $option1 = array(
                    "Completed TBC",
                    (int) $completedbookcount
                );
                array_push($rows, $option1);
                $option2 = array(
                    "In Progress TBC",
                    (int) $pendingbookcount
                );
                array_push($rows, $option2);
            } else {
                $rows = array();
                db_set_active($foss_detail->foss_name); //Active other database
                $query2 = db_select('tbc_book');
                $query2->addExpression('count(*)', 'count');
                //$query2->condition('author', '%'.$extrafilter.'%', 'LIKE');
                $query2->condition('approved', 1);
                $result2 = $query2->execute();
                $query3 = db_select('tbc_book');
                $query3->addExpression('count(*)', 'count');
                //$query3->condition('author', '%'.$extrafilter.'%', 'LIKE');
                $query3->condition('approved', 1, '<>');
                $result3 = $query3->execute();
                db_set_active('default'); // We need to call the main (drupal) db back
                db_set_active();
                $completedbookcount = $result2->fetchObject()->count;
                $pendingbookcount = $result3->fetchObject()->count;
                $option1 = array(
                    "Completed TBC",
                    (int) $completedbookcount
                );
                array_push($rows, $option1);
                $option2 = array(
                    "In Progress TBC",
                    (int) $pendingbookcount
                );
                array_push($rows, $option2);
            }
        }
    } else {
        $rows = array();
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'id'
        ));
        $query->fields('foss_type', array(
            'foss_name'
        ));
        $query->fields('foss_type', array(
            'lab_migration'
        ));
        $query->condition('lab_migration', 1);
        $query->condition('foss_name', $foss_type);
        $result = $query->execute();
        $foss_detail = $result->fetchObject();
        if ($foss_detail->foss_name != null) {
            db_set_active($foss_detail->foss_name); //Active other database
            //For LM
            $query3 = db_query("SELECT COUNT(*) AS count from lab_migration_proposal WHERE approval_status=3 AND city LIKE :value AND 			FROM_UNIXTIME(approval_date) >=:startdate AND FROM_UNIXTIME(approval_date) <=:enddate", array(
                ':value' => "%" . db_like($extrafilter) . "%",
                ':startdate' => $startdate,
                ':enddate' => $enddate
            ));
            $query4 = db_query("SELECT COUNT(*) AS count from lab_migration_proposal WHERE approval_status=1 AND city LIKE :value AND 			FROM_UNIXTIME(approval_date) >=:startdate AND FROM_UNIXTIME(approval_date) <=:enddate", array(
                ':value' => "%" . db_like($extrafilter) . "%",
                ':startdate' => $startdate,
                ':enddate' => $enddate
            ));
            db_set_active('default'); // We need to call the main (drupal) db back
            db_set_active();
            $completedlabcount = $query3->fetchObject()->count;
            $pendinglabcount = $query4->fetchObject()->count;
            $option1 = array(
                "Completed Labs",
                (int) $completedlabcount
            );
            array_push($rows, $option1);
            $option2 = array(
                "In Progress labs",
                (int) $pendinglabcount
            );
            array_push($rows, $option2);
        }
    }
    return $rows;
}


function _ajax_example_get_first_dropdown_options()
{
    $query = db_select('foss_type');
    $query->fields('foss_type', array(
        'id'
    ));
    $query->fields('foss_type', array(
        'foss_name'
    ));
    $result = $query->execute();
    $options = array();
    $options[''] = "--------------";
    while ($foss_detail = $result->fetchObject()) {
        $options[$foss_detail->id] = $foss_detail->foss_name;
    }
    return $options;
}


function _ajax_example_get_second_dropdown_options($foss_project = '')
{
    if ($foss_project != NULL) {
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'tbc',
            'lab_migration',
            'workshop',
            'self_workshop',
            'conference_seminar'
        ));
        $query->fields('foss_type', array(
            'spoken_tutorial',
            'postal_campaigns'
        ));
        $query->condition('id', $foss_project);
        $result = $query->execute();
        $subproject_detail = $result->fetchObject();
        $optiondata = array(
            "tbc",
            "lab_migration",
            "workshop",
            "self_workshop",
            "conference_seminar",
            "spoken_tutorial",
            "postal_campaigns"
        );
        $optionvalue = array(
            " ",
            "Textbook Companion",
            "Lab Migration",
            "Workshop",
            "Self Workshop",
            "Conference/Seminar",
            "Spoken Tutorial",
            "Postal Campaigns"
        );
        $options = array();
        $options[0] = "--------------";
        $i = 0;
        foreach ($optiondata as $value) {
            $i++;
            if (($subproject_detail->$value) != 0) {
                $options[$i] = $optionvalue[$i];
            }
        }
        return $options;
    } else {
        $options[0] = "--------------";
        return $options;
    }
}

function get_activities_list($foss_project){
 if ($foss_project != NULL) {
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'tbc',
            'lab_migration',
            'workshop',
            'self_workshop',
            'conference_seminar'
        ));
        $query->fields('foss_type', array(
            'spoken_tutorial',
            'postal_campaigns'
        ));
        $query->condition('id', $foss_project);
        $result = $query->execute();
        $subproject_detail = $result->fetchObject();
        $optiondata = array(
            "tbc",
            "lab_migration",
            "workshop",
            "self_workshop",
            "conference_seminar",
            "spoken_tutorial",
            "postal_campaigns"
        );
        $optionvalue = array(
            " ",
            "Textbook Companion",
            "Lab Migration",
            "Workshop",
            "Self Workshop",
            "Conference/Seminar",
            "Spoken Tutorial",
            "Postal Campaigns"
        );
        $options = array();
        $options[0] = "--------------";
        $i = 0;
        foreach ($optiondata as $value) {
            $i++;
            if (($subproject_detail->$value) != 0) {
                $options[$i] = $optionvalue[$i];
            }
        }
        return $options;
    } else {
        $options[0] = "--------------";
        return $options;
    }

}



function _ajax_example_get_third_dropdown_options($foss_sub_project)
{
    $options = array();
    if ($foss_sub_project != 0) {
        if ($foss_sub_project == 1) {
            $options[0] = "--------------";
            $options[1] = "Books in Progress";
            $options[2] = "Completed Books";
        } else if ($foss_sub_project == 2) {
            $options[0] = "--------------";
            $options[1] = "Labs in Progress";
            $options[2] = "Completed Labs";
        }
    }
    return $options;
}

/*function ajax_foss_type_dependent_dropdown_callback_test($form, &$form_state)
{

    $foss_sub_project = $form_state['values']['foss_type'];
    $foss_sub_project_activities = $form_state['values']['foss_sub_project'];
    $startdate = $form_state['values']['start_date'];
    $enddate = $form_state['values']['end_date'];
    $enddate = trim($enddate);
    $startdate = trim($startdate);
	$options = array();
    if ($startdate == "") {
        $startdate = '1960/01/01';
    } else {
        $startdate = $startdate;
    }
    if ($enddate == "") {
        $enddate = date("Y-m-d");
    } else {
        $enddate = $enddate;
    }


    if ($foss_sub_project == "") {
        $form['default_load']['#markup'] = "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' checked>
       					<label for='tab-1'>Textbook Companion</label>
      				 	<div class='tabcontent'><div id='tbctabledata' 	
					style='float:left;width:280px;height:200px'>" . get_tabledata_TBC_or_LM("TBC", $startdate, $enddate) . "</div><div id='tbcchartdata' style='float:left;width:250px;height:200px;'>" . drupal_render(getchart("TBC")) . "</div></div></div>
					<div class='tab-preview'><input type='radio' id='tab-2' name='tab-group-1'>
       					<label for='tab-2'>Lab Migration</label>
      				 	<div class='tabcontent'><div id='lmtabledata'						   						style='float:left;width:280px;height:200px'>" . get_tabledata_TBC_or_LM("LM", $startdate, $enddate) . "</div><div id='lmchartdata' 						style='float:left;width:250px;height:200px;'>" . drupal_render(getchart("LM")) . "</div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-3' name='tab-group-1' >
       					<label for='tab-3'>Workshop</label>
      				 	<div class='tabcontent'>" . workshop_view_all(0, $startdate, $enddate) . "</div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-4' name='tab-group-1' >
       					<label for='tab-4'>Self Workshop</label>
      				 	<div class='tabcontent'><div id='selfworkshop'></div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-5' name='tab-group-1' >
       					<label for='tab-5'>Conference/Seminar</label>
      				 	<div class='tabcontent'><div id='conferenceseminar'>" . conference_seminar_view_all(0, $startdate, $enddate) . "</div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-6' name='tab-group-1'>
       					<label for='tab-6'>Spoken Tutorial</label>
      				 	<div class='tabcontent'><div id='spkentutorial'></div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-7' name='tab-group-1'>
       					<label for='tab-7'>Postal Campaigns</label>
      				 	<div class='tabcontent'><div id='postalcampaignsdata'></div></div></div>
					";
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        $form['load_city']['#markup'] = "";
        $commands[] = ajax_command_html("#load_city", "");
        $form['load_state']['#markup'] = "";
        $commands[] = ajax_command_html("#load_state", "");
        $form['load_country']['#markup'] = "";
        $commands[] = ajax_command_html("#load_country", "");
        $form['startdate']['#markup'] = "";
        $commands[] = ajax_command_html("#startdate", "");
        $form['enddate']['#markup'] = "";
        $commands[] = ajax_command_html("#enddate", "");
        $form['dropdown-third-replace']['#markup'] = "";
        $commands[] = ajax_command_html("#dropdown-third-replace", "");
	
	


    }else{

	$form['start_date']['#type'] = "date_popup";
        $form['start_date']['#title'] = t('From Date:');
        $form['start_date']['#date_label_position'] = '';
        $form['start_date']['#description'] = '';
        $form['start_date']['#default_value'] = '';
        $form['start_date']['#date_format'] = 'Y-m-d';
        $form['start_date']['#date_increment'] = 0;
        $form['start_date']['#date_year_range'] = '2011:+0';
        $form['start_date']['#datepicker_options'] = array(
            'maxDate' => 0
        );
        $commands[] = ajax_command_html("#startdate", drupal_render($form['start_date']));
        $form['end_date']['#type'] = "date_popup";
        $form['end_date']['#title'] = t('To Date:');
        $form['end_date']['#date_label_position'] = '';
        $form['end_date']['#description'] = '';
        $form['end_date']['#default_value'] = '';
        $form['end_date']['#date_format'] = 'Y-m-d';
        $form['end_date']['#date_increment'] = 0;
        $form['end_date']['#date_year_range'] = '2011:+0';
        $form['end_date']['#datepicker_options'] = array(
            'maxDate' => 0
        );
        $commands[] = ajax_command_html("#enddate", drupal_render($form['end_date']));

	
        $form['foss_sub_project']['#options'] = get_activities_list($foss_sub_project);
        $commands[] = ajax_command_replace("#dropdown-second-replace", drupal_render($form['foss_sub_project']));

	if ($foss_sub_project != "" && ($foss_sub_project_activities == 1 || $foss_sub_project_activities == 2)) {
        $form['foss_sub_project_status']['#type'] = "select";
        $form['foss_sub_project_status']['#title'] = t("Status");
        $form['foss_sub_project_status']['#options'] = _ajax_example_get_third_dropdown_options($foss_sub_project_activities);
        $commands[] = ajax_command_html("#dropdown-third-replace", drupal_render($form['foss_sub_project_status']));
    } else {
        $form['dropdown-third-replace']['#markup'] = "";
        $commands[] = ajax_command_html("#dropdown-third-replace", "");
    }


}
return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );


}
*/







function ajax_foss_type_dependent_dropdown_callback($form, &$form_state)
{

    $foss_sub_project = $form_state['values']['foss_type'];
    $foss_sub_project_activities = $form_state['values']['foss_sub_project'];
    $startdate = $form_state['values']['start_date'];
    $enddate = $form_state['values']['end_date'];
    $enddate = trim($enddate);
    $startdate = trim($startdate);
    if ($startdate == "") {
        $startdate = '1960/01/01';
    } else {
        $startdate = $startdate;
    }
    if ($enddate == "") {
        $enddate = date("Y-m-d");
    } else {
        $enddate = $enddate;
    }
    if ($foss_sub_project == "") {
        $form['default_load']['#markup'] = "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' checked>
       					<label for='tab-1'>Textbook Companion</label>
      				 	<div class='tabcontent'><div id='tbctabledata' 	
					style='float:left;width:280px;height:200px'>" . get_tabledata_TBC_or_LM("TBC", $startdate, $enddate) . "</div><div id='tbcchartdata' style='float:left;width:250px;height:200px;'>" . drupal_render(getchart("TBC")) . "</div></div></div>
					<div class='tab-preview'><input type='radio' id='tab-2' name='tab-group-1'>
       					<label for='tab-2'>Lab Migration</label>
      				 	<div class='tabcontent'><div id='lmtabledata'						   						style='float:left;width:280px;height:200px'>" . get_tabledata_TBC_or_LM("LM", $startdate, $enddate) . "</div><div id='lmchartdata' 						style='float:left;width:250px;height:200px;'>" . drupal_render(getchart("LM")) . "</div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-3' name='tab-group-1' >
       					<label for='tab-3'>Workshop</label>
      				 	<div class='tabcontent'>" . workshop_view_all(0, $startdate, $enddate) . "</div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-4' name='tab-group-1' >
       					<label for='tab-4'>Self Workshop</label>
      				 	<div class='tabcontent'><div id='selfworkshop'></div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-5' name='tab-group-1' >
       					<label for='tab-5'>Conference/Seminar</label>
      				 	<div class='tabcontent'><div id='conferenceseminar'>" . conference_seminar_view_all(0, $startdate, $enddate) . "</div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-6' name='tab-group-1'>
       					<label for='tab-6'>Spoken Tutorial</label>
      				 	<div class='tabcontent'><div id='spkentutorial'></div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-7' name='tab-group-1'>
       					<label for='tab-7'>Postal Campaigns</label>
      				 	<div class='tabcontent'><div id='postalcampaignsdata'></div></div></div>
					";
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        $form['load_city']['#markup'] = "";
        $commands[] = ajax_command_html("#load_city", "");
        $form['load_state']['#markup'] = "";
        $commands[] = ajax_command_html("#load_state", "");
        $form['load_country']['#markup'] = "";
        $commands[] = ajax_command_html("#load_country", "");
        $form['startdate']['#markup'] = "";
        $commands[] = ajax_command_html("#startdate", "");
        $form['enddate']['#markup'] = "";
        $commands[] = ajax_command_html("#enddate", "");
        $form['dropdown-third-replace']['#markup'] = "";
        $commands[] = ajax_command_html("#dropdown-third-replace", "");

    } else if ($foss_sub_project == '3') {
        $form['startdate']['#markup'] = "";
        $commands[] = ajax_command_html("#startdate", "");
        $form['enddate']['#markup'] = "";
        $commands[] = ajax_command_html("#enddate", "");
        $form['load_city']['#markup'] = "";
        $commands[] = ajax_command_html("#load_city", "");
        $form['load_state']['#markup'] = "";
        $commands[] = ajax_command_html("#load_state", "");
        $form['load_country']['#markup'] = "";
        $commands[] = ajax_command_html("#load_country", "");
    }
    /*else if ($foss_sub_project == '7' || $foss_sub_project == '8')
    {
    $form['load_city']['#markup'] = "";
    $commands[] = ajax_command_html("#load_city", "");
    $form['load_state']['#markup'] = "";
    $commands[] = ajax_command_html("#load_state", "");
    $form['load_country']['#markup'] = "";
    $commands[] = ajax_command_html("#load_country", "");
    }*/
    else {
        $form['start_date']['#type'] = "date_popup";
        $form['start_date']['#title'] = t('From Date:');
        $form['start_date']['#date_label_position'] = '';
        $form['start_date']['#description'] = '';
        $form['start_date']['#default_value'] = '';
        $form['start_date']['#date_format'] = 'Y-m-d';
        $form['start_date']['#date_increment'] = 0;
        $form['start_date']['#date_year_range'] = '2011:+0';
        $form['start_date']['#datepicker_options'] = array(
            'maxDate' => 0
        );
        $commands[] = ajax_command_html("#startdate", drupal_render($form['start_date']));
        $form['end_date']['#type'] = "date_popup";
        $form['end_date']['#title'] = t('To Date:');
        $form['end_date']['#date_label_position'] = '';
        $form['end_date']['#description'] = '';
        $form['end_date']['#default_value'] = '';
        $form['end_date']['#date_format'] = 'Y-m-d';
        $form['end_date']['#date_increment'] = 0;
        $form['end_date']['#date_year_range'] = '2011:+0';
        $form['end_date']['#datepicker_options'] = array(
            'maxDate' => 0
        );
        $commands[] = ajax_command_html("#enddate", drupal_render($form['end_date']));

    }
    $form['foss_sub_project']['#default_value']="--------------";
    $form['foss_sub_project']['#options'] = get_activities_list($foss_sub_project);
    $commands[] = ajax_command_replace("#dropdown-second-replace", drupal_render($form['foss_sub_project']));


    if ($foss_sub_project != "" && ($foss_sub_project_activities == 1 || $foss_sub_project_activities == 2)) {
        $form['foss_sub_project_status']['#type'] = "select";
        $form['foss_sub_project_status']['#title'] = t("Status");
        $form['foss_sub_project_status']['#options'] = _ajax_example_get_third_dropdown_options($foss_sub_project_activities);
        $commands[] = ajax_command_html("#dropdown-third-replace", drupal_render($form['foss_sub_project_status']));
    } else {
        $form['dropdown-third-replace']['#markup'] = "";
        $commands[] = ajax_command_html("#dropdown-third-replace", "");
    }
    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}


function ajax_foss_sub_project_dependent_dropdown_callback($form, &$form_state)
{
    $foss_project = $form_state['values']['foss_sub_project'];
    $foss_type = $form_state['values']['foss_type'];
    if ($foss_type != "" && $foss_project != 0 && $foss_type != 3) {
        $form['countryname']['#type'] = "select";
        $form['countryname']['#title'] = t("Select Country");
        $form['countryname']['#option'] = get_country_list($foss_type,$foss_project);
        $form['countryname']['#prefix'] = "<div>";
        $form['countryname']['#suffix'] = "</div>";
        $commands[] = ajax_command_html("#load_country", drupal_render($form['countryname']));
        $country_value = $form_state['values']['countryname'];
        
        $form['statename']['#type'] = "select";
        $form['statename']['#title'] = t("State Name");
        $form['statename']['#options'] = get_state_list($foss_type, $foss_project, $country_value);
        $form['statename']['#prefix'] = "<div>";
        $form['statename']['#suffix'] = "</div>";
        $commands[] = ajax_command_html("#load_state", drupal_render($form['statename']));
        $state_value = $form_state['values']['statename'];
        
        $form['cityname']['#type'] = "select";
        $form['cityname']['#title'] = t("City Name");
        $form['cityname']['#options'] = get_city_list($foss_type, $foss_project, $country_value, $state_value);
        $form['cityname']['#prefix'] = "<div style='padding-right:15px;'>";
        $form['cityname']['#suffix'] = "</div>";
        $commands[] = ajax_command_html("#load_city", drupal_render($form['cityname']));
        
    } else {
        $form['load_city']['#markup'] = "";
        $commands[] = ajax_command_html("#load_city", "");
    }
    if ($foss_project == 1 || $foss_project == 2) {
        $form['foss_sub_project_status']['#type'] = "select";
        $form['foss_sub_project_status']['#title'] = t("Status");
        $form['foss_sub_project_status']['#options'] = _ajax_example_get_third_dropdown_options($foss_project);
        $commands[] = ajax_command_html("#dropdown-third-replace", drupal_render($form['foss_sub_project_status']));
    } else {
        $form['dropdown-third-replace']['#markup'] = "";
        $commands[] = ajax_command_html("#dropdown-third-replace", "");
    }
    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}


function ajax_example_submit_driven_callback($form, &$form_state)
{
    $foss_type = $form['foss_type']['#options'][$form_state['values']['foss_type']];
    $foss_sub_project = $form['foss_sub_project']['#options'][$form_state['values']['foss_sub_project']];
    $foss_sub_project_status = $form['foss_sub_project_status']['#options'][$form_state['values']['foss_sub_project_status']];
    $startdate = $form_state['values']['start_date'];
    $startdate = trim($startdate);
    $enddate = $form_state['values']['end_date'];
    $enddate = trim($enddate);
    $countryname = $form_state['values']['countryname'];
    $countryname = trim($countryname);
    $cityname = $form_state['values']['cityname'];
    $cityname = trim($cityname);
    $statename = $form_state['values']['statename'];
    $statename = trim($statename);
    
    
    $link_flag = 0;
    if ($foss_sub_project == "Lab Migration" || $foss_sub_project == "Textbook Companion") {
        if ($cityname != "" || $startdate != "" || $enddate != "" || $statename != "") {
            $link_flag = 1;
        } else {
            $link_flag = 0;
        }
        if ($cityname == "") {
            $cityname = "";
        } else {
            $cityname = $cityname;
        }
    }
    if ($startdate == "") {
        $startdate = '1960/01/01';
    } else {
        $startdate = $startdate;
    }
    if ($enddate == "") {
        $enddate = date("Y-m-d");
    } else {
        $enddate = $enddate;
    }
    if ($foss_type == '--------------') {
        $form['default_load']['#markup'] = "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' checked>
       					<label for='tab-1'>Textbook Companion</label>
      				 	<div class='tabcontent'><div id='tbctabledata' 	
					style='float:left;width:280px;height:200px'>" . get_tabledata_TBC_or_LM("TBC", $startdate, $enddate) . "</div><div id='tbcchartdata' style='float:left;width:250px;height:200px;'>" . drupal_render(getchart("TBC")) . "</div></div></div>
					<div class='tab-preview'><input type='radio' id='tab-2' name='tab-group-1'>
       					<label for='tab-2'>Lab Migration</label>
      				 	<div class='tabcontent'><div id='lmtabledata'						   						style='float:left;width:280px;height:200px'>" . get_tabledata_TBC_or_LM("LM", $startdate, $enddate) . "</div><div id='lmchartdata' 						style='float:left;width:250px;height:200px;'>" . drupal_render(getchart("LM")) . "</div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-3' name='tab-group-1' >
       					<label for='tab-3'>Workshop</label>
      				 	<div class='tabcontent'>" . workshop_view_all(0, $startdate, $enddate) . "</div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-4' name='tab-group-1' >
       					<label for='tab-4'>Self Workshop</label>
      				 	<div class='tabcontent'><div id='selfworkshop'></div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-5' name='tab-group-1' >
       					<label for='tab-5'>Conference/Seminar</label>
      				 	<div class='tabcontent'><div id='conferenceseminar'>" . conference_seminar_view_all(0, "", "") . "</div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-6' name='tab-group-1'>
       					<label for='tab-6'>Spoken Tutorial</label>
      				 	<div class='tabcontent'><div id='spkentutorial'></div></div></div>
					<div class='tab-preview'>
       					<input type='radio' id='tab-7' name='tab-group-1'>
       					<label for='tab-7'>Postal Campaigns</label>
      				 	<div class='tabcontent'><div id='postalcampaignsdata'></div></div></div>
					";
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
    } else if ($foss_type != '--------------' && (($foss_sub_project == "--------------") || ($foss_sub_project == "No Sub-Project Available"))) {
        $form['displaytext']['#markup'] = "Statistic of project : " . $foss_type;
        $commands[] = ajax_command_html("#displaytext", drupal_render($form['displaytext']));
        db_set_active('default'); // We need to call the main (drupal) db back      
        db_set_active(); // without the paramater means set back to the default for the site
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'tbc',
            'lab_migration',
            'workshop',
            'self_workshop',
            'conference_seminar'
        ));
        $query->fields('foss_type', array(
            'spoken_tutorial',
            'postal_campaigns'
        ));
        $query->condition('foss_name', $foss_type);
        $result = $query->execute();
        $subproject_detail = $result->fetchObject();
        $optiondata = array(
            "tbc",
            "lab_migration",
            "workshop",
            "self_workshop",
            "conference_seminar",
            "spoken_tutorial",
            "postal_campaigns"
        );
        $optionvalue = array(
            " ",
            "Textbook Companion",
            "Lab Migration",
            "Workshop",
            "Self Workshop",
            "Conference/Seminar",
            "Spoken Tutorial",
            "Postal Campaigns"
        );
        $i = 0;
        $pagecontent = "";
        foreach ($optiondata as $value) {
            $i++;
            //$options[$i]=$optionvalue[$i];
            if (($subproject_detail->$value) != 0) {
                if ($value == "tbc") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' checked>
       					<label for='tab-1'>Textbook Companion</label>
      				 	<div class='tabcontent'><div id='tbctabledata' 	
					style='float:left;width:280px;height:200px'>" . get_tabledata_selectedFoss_TBC_LM($foss_type, 'TBC', 'all', $startdate, $enddate, $cityname, $link_flag) . "</div><div id='tbcchartdata' style='float:left;width:250px;height:200px;'>" . drupal_render(getchartforselectedProject($foss_type, "TBC", $startdate, $enddate, $cityname)) . "</div></div></div>";
                } else if ($value == "lab_migration") {
                    $pagecontent .= "<div class='tab-preview'>
						<input type='radio' id='tab-2' name='tab-group-1'>
		       				<label for='tab-2'>Lab Migration</label>
      				 		<div class='tabcontent'>
						<div id='lmtabledata' style='float:left;width:280px;height:200px'>" . get_tabledata_selectedFoss_TBC_LM($foss_type, 'LM', "all", $startdate, $enddate, $cityname, $link_flag) . "</div>
						<div id='lmchartdata' style='float:left;width:250px;height:200px;'>" . drupal_render(getchartforselectedProject($foss_type, "LM", $startdate, $enddate, $cityname)) . "<div></div></div></div></div>";
                } else if ($value == "workshop") {
                    
                    $event_type = "Workshop";
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-3' name='tab-group-1' >
       					<label for='tab-3'>Workshop</label>
      				 	<div class='tabcontent'><div>" . events_view_filter($foss_type, $event_type, $startdate, $enddate, $countryname, $statename, $cityname) . "</div></div></div>";
                } else if ($value == "self_workshop") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-4' name='tab-group-1' >
       					<label for='tab-4'>Self Workshop</label>
      				 	<div class='tabcontent'></div></div>";
                } else if ($value == "conference_seminar") {
                    $event_type = "Conference/Seminar";
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-5' name='tab-group-1' >
       					<label for='tab-5'>Conference/Seminar</label>
      				 	<div class='tabcontent'><div id='conference'>" . events_view_filter($foss_type, $event_type, $startdate, $enddate, $countryname, $statename, $cityname) . "</div></div></div>";
                } else if ($value == "spoken_tutorial") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-6' name='tab-group-1' >
       					<label for='tab-6'>Spoken Tutorial</label>
      				 	<div class='tabcontent'></div></div>";
                } else if ($value == "postal_campaigns") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-7' name='tab-group-1' >
       					<label for='tab-7'>Postal Campaigns</label>
      				 	<div class='tabcontent'></div></div>";
                }
            } else {
                if ($value == "tbc") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' checked>
       					<label for='tab-1'>Textbook Companion</label>
      				 	<div class='tabcontent'><div id='tbctabledata' 	
					>" . t("
					<h5>TextBook Companion Project Not Present</h5>") . "</div></div></div>";
                } else if ($value == "lab_migration") {
                    $pagecontent .= "<div class='tab-preview'>
						<input type='radio' id='tab-2' name='tab-group-1'>
		       				<label for='tab-2'>Lab Migration</label>
      				 		<div class='tabcontent'>
						<div id='lmtabledata'>" . t("
					<h5>Lab Migration Project Not Present</h5>") . "<div></div></div></div></div>";
                } else if ($value == "workshop") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-3' name='tab-group-1' >
       					<label for='tab-3'>Workshop</label>
      				 	<div class='tabcontent'><div>" . t("
					<h5> No Workshop were conducted </h5>") . "</div></div></div>";
                } else if ($value == "self_workshop") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-4' name='tab-group-1' >
       					<label for='tab-4'>Self Workshop</label>
      				 	<div class='tabcontent'>" . t("
					<h5>No Self Workshop were conducted</h5>") . "</div></div>";
                } else if ($value == "conference_seminar") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-5' name='tab-group-1' >
       					<label for='tab-5'>Conference/Seminar</label>
      				 	<div class='tabcontent'><div id='conference'>" . t("
					<h5>No Conference/Seminar were conducted</h5>") . "</div></div></div>";
                } else if ($value == "spoken_tutorial") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-6' name='tab-group-1' >
       					<label for='tab-6'>Spoken Tutorial</label>
      				 	<div class='tabcontent'>" . t("
					<h5>Spoken Tutorial Not Present</h5>") . "</div></div>";
                } else if ($value == "postal_campaigns") {
                    $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-7' name='tab-group-1' >
       					<label for='tab-7'>Postal Campaigns</label>
      				 	<div class='tabcontent'>" . t("
					<h5>No Postal Campaigns were conducted</h5>") . "</div></div>";
                }
            }
        }
        $form['default_load']['#markup'] = $pagecontent;
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        /*$queryt = db_select('foss_type');
        $queryt->fields('foss_type', array('tbc'));
        $queryt->fields('foss_type', array('lab_migration'));
        $queryt->condition('foss_name',$foss_type);
        $resultt = $queryt->execute();
        $subproject_detail = $resultt->fetchObject();*/
        /*if(($subproject_detail->tbc)!=0&&($subproject_detail->lab_migration)!=0){
        
        $form['default_load']['#markup']="<div class='tab-preview'>
        <input type='radio' id='tab-1' name='tab-group-1' checked>
        <label for='tab-1'>Textbook Companion</label>
        <div class='tabcontent'><div id='tbctabledata' 	
        style='float:left;width:280px;height:200px'>"
        .get_tabledata_selectedFoss_TBC_LM($foss_type,'TBC','all',$startdate,$enddate,$cityname,$link_flag).
        "</div><div id='tbcchartdata' style='float:left;width:250px;height:200px;'>"
        .drupal_render(getchartforselectedProject($foss_type,"TBC",$startdate,$enddate,$cityname))."</div></div></div>
        <div class='tab-preview'><input type='radio' id='tab-2' name='tab-group-1'>
        <label for='tab-2'>Lab Migration</label>
        <div class='tabcontent'><div id='lmtabledata'						   						style='float:left;width:280px;height:200px'>"
        .get_tabledata_selectedFoss_TBC_LM($foss_type,'LM',"all",$startdate,$enddate,$cityname,$link_flag)."</div><div id='lmchartdata' 						style='float:left;width:250px;height:200px;'>"
        .drupal_render(getchartforselectedProject($foss_type,"LM",$startdate,$enddate,$cityname))."</div></div></div>
        ";
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        
        
        }else if(($subproject_detail->tbc)!=0&&($subproject_detail->lab_migration)==0){
        
        $form['default_load']['#markup']="<div class='tab-preview'>
        <input type='radio' id='tab-1' name='tab-group-1' checked>
        <label for='tab-1'>Textbook Companion</label>
        <div class='tabcontent'><div id='tbctabledata' 	
        style='float:left;width:280px;height:200px'>"
        .get_tabledata_selectedFoss_TBC_LM($foss_type,'TBC',"all",$startdate,$enddate,$cityname,$link_flag).
        "</div><div id='tbcchartdata' style='float:left;width:250px;height:200px;'>"
        .drupal_render(getchartforselectedProject($foss_type,"TBC",$startdate,$enddate,$cityname))."</div></div></div>
        <div class='tab-preview'><input type='radio' id='tab-2' name='tab-group-1'>
        <label for='tab-2'>Lab Migration</label>
        <div class='tabcontent'><div id='lmtabledata'						   						style='float:left;width:280px;height:200px'>".t("
        <h5>Lab Migration Project Not Present</h5>")."</div></div></div>";
        
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        
        }
        else if(($subproject_detail->tbc)==0&&($subproject_detail->lab_migration)!=0){
        
        $form['default_load']['#markup']="<div class='tab-preview'>
        <input type='radio' id='tab-1' name='tab-group-1' checked>
        <label for='tab-1'>Textbook Companion</label>
        <div class='tabcontent'><div id='tbctabledata' 	
        style='float:left;width:400px;height:200px'>".t("
        <h5>TextBook Companion Project Not Present</h5>")."
        </div></div></div>
        <div class='tab-preview'><input type='radio' id='tab-2' name='tab-group-1' checked>
        <label for='tab-2'>Lab Migration</label>
        <div class='tabcontent'><div id='lmtabledata'						   						style='float:left;width:280px;height:200px'>"
        .get_tabledata_selectedFoss_TBC_LM($foss_type,'LM',"all",$startdate,$enddate,$cityname,$link_flag)."</div><div id='lmchartdata' 						style='float:left;width:250px;height:200px;'>"
        .drupal_render(getchartforselectedProject($foss_type,"LM",$startdate,$enddate,$cityname))."</div></div></div>
        ";
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        
        }
        
        
        else if(($subproject_detail->tbc)==0&&($subproject_detail->lab_migration)==0){
        $form['default_load']['#markup']="<div class='tab-preview'>
        <input type='radio' id='tab-1' name='tab-group-1' checked>
        <label for='tab-1'>Textbook Companion</label>
        <div class='tabcontent'><div id='tbctabledata' 	
        style='float:left;width:400px;height:200px'>".t("
        <h5>TextBook Companion Project Not Present</h5>")."
        </div></div></div>
        <div class='tab-preview'><input type='radio' id='tab-2' name='tab-group-1'>
        <label for='tab-2'>Lab Migration</label>
        <div class='tabcontent'><div id='lmtabledata'						   						style='float:left;width:400px;height:200px'>".t("
        <h5>Lab Migration Project Not Present</h5>")."
        </div></div></div>
        ";
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        
        } */
    } else if ($foss_type != '--------------' && $foss_sub_project == "Textbook Companion" && $foss_sub_project_status == "--------------") {
        //var_dump($foss_type.".................".$foss_sub_project);
        $form['displaytext']['#markup'] = "Statistic of project : " . $foss_type;
        $commands[] = ajax_command_html("#displaytext", drupal_render($form['displaytext']));
        $pagecontent = "";
        $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' checked>
       					<label for='tab-1'>Textbook Companion</label>
      				 	<div class='tabcontent'><div id='tbctabledata' 	
					style='float:left;width:280px;height:200px'>" . get_tabledata_selectedFoss_TBC_LM($foss_type, 'TBC', 'all', $startdate, $enddate, $cityname, $link_flag) . "</div><div id='tbcchartdata' style='float:left;width:250px;height:200px;'>" . drupal_render(getchartforselectedProject($foss_type, "TBC", $startdate, $enddate, $cityname)) . "</div></div></div>";
        $form['default_load']['#markup'] = $pagecontent;
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        /* $form['default_load']['#markup'] = "<div class='tab-preview'>
        <input type='radio' id='tab-1' name='tab-group-1' checked>
        <label for='tab-1'>Textbook Companion</label>
        <div class='tabcontent'><div id='tbctabledata' 	
        style='float:left;width:280px;height:200px'>" . get_tabledata_selectedFoss_TBC_LM($foss_type, 'TBC', "all", $startdate, $enddate, $cityname, $link_flag) . "</div><div id='tbcchartdata' style='float:left;width:250px;height:200px;'>" . drupal_render(getchartforselectedProject($foss_type, "TBC", $startdate, $enddate, $cityname)) . "</div></div></div>
        ";
        
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));*/
    } else if ($foss_type != '--------------' && $foss_sub_project == "Lab Migration" && $foss_sub_project_status == "--------------") {
        $form['displaytext']['#markup'] = "Statistic of project : " . $foss_type;
        $commands[] = ajax_command_html("#displaytext", drupal_render($form['displaytext']));
        $form['default_load']['#markup'] = "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' checked>
       					<label for='tab-1'>Lab Migration</label>
      				 	<div class='tabcontent'><div id='lmtabledata' 	
					style='float:left;width:280px;height:200px'>" . get_tabledata_selectedFoss_TBC_LM($foss_type, 'LM', "all", $startdate, $enddate, $cityname, $link_flag) . "</div><div id='lmchartdata' style='float:left;width:250px;height:200px;'>" . drupal_render(getchartforselectedProject($foss_type, "LM", $startdate, $cityname)) . "</div></div></div>
					";
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        
    } else if ($foss_type != '--------------' && $foss_sub_project == "Workshop") {
        
        $form['displaytext']['#markup'] = "Statistic of project : " . $foss_type;
        $commands[] = ajax_command_html("#displaytext", drupal_render($form['displaytext']));
        
        
        $pagecontent = "";
        $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' >
       					<label for='tab-1'>Workshop</label>
      				 	<div class='tabcontent'>" . events_view_filter($foss_type, $foss_sub_project, $startdate, $enddate, $countryname, $statename, $cityname) . "</div></div>";
        
        $form['default_load']['#markup'] = $pagecontent;
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        
    } else if ($foss_type != '--------------' && $foss_sub_project == "Conference/Seminar") {
        
        $form['displaytext']['#markup'] = "Statistic of project : " . $foss_type;
        $commands[] = ajax_command_html("#displaytext", drupal_render($form['displaytext']));
        
        
        $pagecontent = "";
        $pagecontent .= "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' >
       					<label for='tab-1'>Conference/Seminar</label>
      				 	<div class='tabcontent'>" . events_view_filter($foss_type, $foss_sub_project, $startdate, $enddate, $countryname, $statename, $cityname) . "</div></div>";
        
        $form['default_load']['#markup'] = $pagecontent;
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        
    } else if ($foss_type != '--------------' && ($foss_sub_project == "Textbook Companion" || $foss_sub_project == "Lab Migration") && $foss_sub_project_status != "--------------") {
        if ($foss_sub_project == "Textbook Companion" && $foss_sub_project_status == "Completed Books") {
            $title = "Textbook Companion";
            $datatable = get_tabledata_selectedFoss_TBC_LM($foss_type, 'TBC', "completed", $startdate, $enddate, $cityname, $link_flag);
        } else if ($foss_sub_project == "Lab Migration" && $foss_sub_project_status == "Completed Labs") {
            $title = "Lab Migration";
            $datatable = get_tabledata_selectedFoss_TBC_LM($foss_type, 'LM', "completed", $startdate, $enddate, $cityname, $link_flag);
        } else if ($foss_sub_project == "Textbook Companion" && $foss_sub_project_status == "Books in Progress") {
            $title = "Textbook Companion";
            $datatable = get_tabledata_selectedFoss_TBC_LM($foss_type, 'TBC', "pending", $startdate, $enddate, $cityname, $link_flag);
        } else if ($foss_sub_project == "Lab Migration" && $foss_sub_project_status == "Labs in Progress") {
            $title = "Lab Migration";
            $datatable = get_tabledata_selectedFoss_TBC_LM($foss_type, 'LM', "pending", $startdate, $enddate, $cityname, $link_flag);
        }
        $form['displaytext']['#markup'] = "Statistic of project : " . $foss_type;
        $commands[] = ajax_command_html("#displaytext", drupal_render($form['displaytext']));
        $form['default_load']['#markup'] = "<div class='tab-preview'>
       					<input type='radio' id='tab-1' name='tab-group-1' checked>
       					<label for='tab-1'>" . $title . "</label>
      				 	<div class='tabcontent'><div id='tabledata' 	
					style='float:left;width:280px;height:200px'>" . $datatable . "</div></div></div></div>
					";
        $commands[] = ajax_command_html("#default_load", drupal_render($form['default_load']));
        
    }
    
    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}


function bootstrap_table_format($headers, $rows)
{
    $thead = "";
    $tbody = "";
    foreach ($headers as $header) {
        $thead .= "<th>{$header}</th>";
    }
    foreach ($rows as $row) {
        $tbody .= "<tr>";
        $i = 0;
        foreach ($row as $data) {
            $datalable = $headers[$i++];
            $tbody .= "<td data-label=" . $datalable . ">{$data}</td>";
        }
        $tbody .= "</tr>";
    }
    $table = "
			
            		<table class='table table-bordered table-hover'>
                	<thead>{$thead}</thead>
                	<tbody>{$tbody}</tbody>
            		</table>
			
        		";
    return $table;
}


function get_tabledata_TBC_or_LM($sub_type, $startdate, $enddate)
{
    if ($enddate == "") {
        $enddate = date("Y-m-d");
    }
    $rows = array();
    $headers = array(
        " Project",
        "Completed",
        "Pending"
    );
    if ($sub_type == 'TBC') {
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'id'
        ));
        $query->fields('foss_type', array(
            'foss_name'
        ));
        $query->fields('foss_type', array(
            'tbc'
        ));
        $query->fields('foss_type', array(
            'tbc_completed'
        ));
        $query->fields('foss_type', array(
            'tbc_pending'
        ));
        $query->condition('tbc', 1);
        $result = $query->execute();
        while ($foss_detail = $result->fetchObject()) {
            $foss_type = $foss_detail->foss_name;
            db_set_active($foss_type);
            if ($foss_detail->foss_name != 'Python') {
                db_set_active($foss_detail->foss_name); //Active other database
                if ($foss_detail->foss_name != 'eSim' && $foss_detail->foss_name != 'OpenFOAM' && $foss_detail->foss_name != 'OR-Tools') {
                    if ($foss_detail->foss_name != 'DWSIM') {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.category>0 AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate ", array(
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    } else {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.category>0 AND FROM_UNIXTIME(po.actual_completion_date) >= :startdate AND FROM_UNIXTIME(po.actual_completion_date) <= :enddate ", array(
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    }
                } else {
                    $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate ", array(
                        ':startdate' => $startdate,
                        ':enddate' => $enddate
                    ));
                }
                $completedbookcount = $query2->fetchObject()->book_count;
                if ($foss_detail->tbc_completed != "" && $foss_detail->tbc_completed != null) {
                    $clink = "<a href=" . $foss_detail->tbc_completed . " target='_blank'>" . $completedbookcount . "</a>";
                    $completedbookcount = $clink;
                }
                if ($foss_detail->foss_name != 'eSim' && $foss_detail->foss_name != 'OpenFOAM' && $foss_detail->foss_name != 'OR-Tools') {
                    if ($foss_detail->foss_name != 'DWSIM') {
                        $query3 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate ", array(
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    } else {
                        $query3 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1  AND FROM_UNIXTIME(po.actual_completion_date) >= :startdate AND FROM_UNIXTIME(po.actual_completion_date) <= :enddate ", array(
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    }
                } else {
                    $query3 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate ", array(
                        ':startdate' => $startdate,
                        ':enddate' => $enddate
                    ));
                }
                $pendingbookcount = $query3->fetchObject()->book_count;
                if ($foss_detail->tbc_pending != "" && $foss_detail->tbc_pending != null) {
                    $plink = "<a href=" . $foss_detail->tbc_pending . " target='_blank'>" . $pendingbookcount . "</a>";
                    $pendingbookcount = $plink;
                }
                db_set_active('default'); // We need to call the main (drupal) db back      
                db_set_active(); // without the paramater means set back to the default for the site
                $item = array(
                    $foss_detail->foss_name,
                    $completedbookcount,
                    $pendingbookcount
                );
                array_push($rows, $item);
            } else {
                //For Python TBC
                db_set_active($foss_detail->foss_name); //Active other database
                $query5 = db_select('tbc_book');
                $query5->addExpression('count(*)', 'count');
                $query5->condition('approved', 1);
                $result5 = $query5->execute();
                $completedbookcount = $result5->fetchObject()->count;
                if ($foss_detail->tbc_completed != "" && $foss_detail->tbc_completed != null) {
                    $clink = "<a href=" . $foss_detail->tbc_completed . " target='_blank'>" . $completedbookcount . "</a>";
                    $completedbookcount = $clink;
                }
                $query6 = db_select('tbc_book');
                $query6->addExpression('count(*)', 'count');
                $query6->condition('approved', 1, '<>');
                $result6 = $query6->execute();
                $pendingbookcount = $result6->fetchObject()->count;
                if ($foss_detail->tbc_pending != "" && $foss_detail->tbc_pending != null) {
                    $plink = "<a href=" . $foss_detail->tbc_pending . " target='_blank'>" . $pendingbookcount . "</a>";
                    $pendingbookcount = $plink;
                }
                db_set_active('default'); // We need to call the main (drupal) db back      
                db_set_active(); // without the paramater means set back to the default for the site
                $item = array(
                    $foss_detail->foss_name,
                    $completedbookcount,
                    $pendingbookcount
                );
                array_push($rows, $item);
            }
        }
    } else {
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'id'
        ));
        $query->fields('foss_type', array(
            'foss_name'
        ));
        $query->fields('foss_type', array(
            'lab_migration'
        ));
        $query->fields('foss_type', array(
            'lm_completed'
        ));
        $query->fields('foss_type', array(
            'lm_pending'
        ));
        $query->condition('lab_migration', 1);
        $result = $query->execute();
        while ($foss_detail = $result->fetchObject()) {
            db_set_active($foss_detail->foss_name); //Active other database
            $query2 = db_select('lab_migration_proposal');
            $query2->addExpression('count(*)', 'count');
            $query2->condition('approval_status', 3);
            $result2 = $query2->execute();
            $completedlabcount = $result2->fetchObject()->count;
            if ($foss_detail->lm_completed != "" && $foss_detail->lm_completed != null) {
                $clink = "<a href=" . $foss_detail->lm_completed . " target='_blank'>" . $completedlabcount . "</a>";
                $completedlabcount = $clink;
            }
            $query3 = db_select('lab_migration_proposal');
            $query3->addExpression('count(*)', 'count');
            $query3->condition('approval_status', 1);
            $result3 = $query3->execute();
            $pendinglabcount = $result3->fetchObject()->count;
            if ($foss_detail->lm_pending != "" && $foss_detail->lm_pending != null) {
                $plink = "<a href=" . $foss_detail->lm_pending . " target='_blank'>" . $pendinglabcount . "</a>";
                $pendinglabcount = $plink;
            }
            $item = array(
                $foss_detail->foss_name,
                $completedlabcount,
                $pendinglabcount
            );
            array_push($rows, $item);
        }
    }
    db_set_active('default'); // We need to call the main (drupal) db back      
    db_set_active(); // without the paramater means set back to the default for the site
    $count = bootstrap_table_format($headers, $rows);
    return $count;
}


function get_tabledata_selectedFoss_TBC_LM($foss_type, $sub_type, $status, $startdate, $enddate, $extrafilter, $link_flag)
{
    if ($status == "all") {
        $rows = array();
        if ($sub_type == 'TBC') {
            $headers = array(
                "Completed Book",
                "Book In Progress"
            );
            $query = db_select('foss_type');
            $query->fields('foss_type', array(
                'id'
            ));
            $query->fields('foss_type', array(
                'foss_name'
            ));
            $query->fields('foss_type', array(
                'tbc'
            ));
            $query->fields('foss_type', array(
                'tbc_completed'
            ));
            $query->fields('foss_type', array(
                'tbc_pending'
            ));
            $query->condition('foss_name', $foss_type);
            $query->condition('tbc', 1);
            $result = $query->execute();
            $foss_detail = $result->fetchObject();
            $foss_type = $foss_detail->foss_name;
            db_set_active($foss_type);
            if ($foss_detail->foss_name != 'Python') {
                db_set_active($foss_detail->foss_name); //Active other database
                if ($foss_detail->foss_name != 'eSim' && $foss_detail->foss_name != 'OpenFOAM' && $foss_detail->foss_name != 'OR-Tools') {
                    if ($foss_detail->foss_name != 'DWSIM') {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    } else {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.actual_completion_date) >= :startdate AND FROM_UNIXTIME(po.actual_completion_date) <= :enddate", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    }
                } else {
                    $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.book LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                        ':value' => "%" . db_like($extrafilter) . "%",
                        ':startdate' => $startdate,
                        ':enddate' => $enddate
                    ));
                }
                $completedbookcount = $query2->fetchObject()->book_count;
                if ($foss_detail->tbc_completed != "" && $foss_detail->tbc_completed != null && $link_flag != 1) {
                    $clink = "<a href=" . $foss_detail->tbc_completed . " target='_blank'>" . $completedbookcount . "</a>";
                    $completedbookcount = $clink;
                }
                if ($foss_detail->foss_name != 'eSim' && $foss_detail->foss_name != 'OpenFOAM' && $foss_detail->foss_name != 'OR-Tools') {
                    if ($foss_detail->foss_name != 'DWSIM') {
                        $query3 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate ", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    } else {
                        $query3 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.actual_completion_date) >= :startdate AND FROM_UNIXTIME(po.actual_completion_date) <= :enddate", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    }
                } else {
                    $query3 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                        ':value' => "%" . db_like($extrafilter) . "%",
                        ':startdate' => $startdate,
                        ':enddate' => $enddate
                    ));
                }
                $pendingbookcount = $query3->fetchObject()->book_count;
                if ($foss_detail->tbc_pending != "" && $foss_detail->tbc_pending != null && $link_flag != 1) {
                    $plink = "<a href=" . $foss_detail->tbc_pending . " target='_blank'>" . $pendingbookcount . "</a>";
                    $pendingbookcount = $plink;
                }
                //db_set_active('default'); // We need to call the main (drupal) db back      
                //db_set_active(); // without the paramater means set back to the default for the site
                $item = array(
                    $completedbookcount,
                    $pendingbookcount
                );
                array_push($rows, $item);
            } else {
                //For Python TBC
                db_set_active($foss_detail->foss_name); //Active other database
                $query5 = db_select('tbc_book');
                $query5->addExpression('count(*)', 'count');
                $query5->condition('approved', 1);
                //$query5->condition('author', '%'.$extrafilter.'%', 'LIKE');
                $result5 = $query5->execute();
                $completedbookcount = $result5->fetchObject()->count;
                if ($foss_detail->tbc_completed != "" && $foss_detail->tbc_completed != null && $link_flag != 1) {
                    $clink = "<a href=" . $foss_detail->tbc_completed . " target='_blank'>" . $completedbookcount . "</a>";
                    $completedbookcount = $clink;
                }
                $query6 = db_select('tbc_book');
                $query6->addExpression('count(*)', 'count');
                $query6->condition('approved', 1, '<>');
                //$query6->condition('author', '%'.$extrafilter.'%', 'LIKE');
                $result6 = $query6->execute();
                $pendingbookcount = $result6->fetchObject()->count;
                if ($foss_detail->tbc_pending != "" && $foss_detail->tbc_pending != null && $link_flag != 1) {
                    $plink = "<a href=" . $foss_detail->tbc_pending . " target='_blank'>" . $pendingbookcount . "</a>";
                    $pendingbookcount = $plink;
                }
                //db_set_active('default'); // We need to call the main (drupal) db back      
                //db_set_active(); // without the paramater means set back to the default for the site
                $item = array(
                    $completedbookcount,
                    $pendingbookcount
                );
                array_push($rows, $item);
            }
        } else {
            $headers = array(
                "Completed Labs",
                "Labs In Progress"
            );
            $query = db_select('foss_type');
            $query->fields('foss_type', array(
                'id'
            ));
            $query->fields('foss_type', array(
                'foss_name'
            ));
            $query->fields('foss_type', array(
                'lab_migration'
            ));
            $query->fields('foss_type', array(
                'lm_completed'
            ));
            $query->fields('foss_type', array(
                'lm_pending'
            ));
            $query->condition('foss_name', $foss_type);
            $query->condition('lab_migration', 1);
            $result = $query->execute();
            $foss_detail = $result->fetchObject();
            db_set_active($foss_detail->foss_name); //Active other database
            $query2 = db_query("SELECT COUNT(*) AS count from lab_migration_proposal WHERE approval_status=3 AND city 			LIKE :value AND FROM_UNIXTIME(approval_date) >=:startdate AND FROM_UNIXTIME(approval_date) <=:enddate", array(
                ':value' => "%" . db_like($extrafilter) . "%",
                ':startdate' => $startdate,
                ':enddate' => $enddate
            ));
            $completedlabcount = $query2->fetchObject()->count;
            if ($foss_detail->lm_completed != "" && $foss_detail->lm_completed != null && $link_flag != 1) {
                $clink = "<a href=" . $foss_detail->lm_completed . " target='_blank'>" . $completedlabcount . "</a>";
                $completedlabcount = $clink;
            }
            $query3 = db_query("SELECT COUNT(*) AS count from lab_migration_proposal WHERE approval_status=1 AND city 			LIKE :value AND FROM_UNIXTIME(approval_date) >=:startdate AND FROM_UNIXTIME(approval_date) <=:enddate", array(
                ':value' => "%" . db_like($extrafilter) . "%",
                ':startdate' => $startdate,
                ':enddate' => $enddate
            ));
            $pendinglabcount = $query3->fetchObject()->count;
            if ($foss_detail->lm_pending != "" && $foss_detail->lm_pending != null && $link_flag != 1) {
                $plink = "<a href=" . $foss_detail->lm_pending . " target='_blank'>" . $pendinglabcount . "</a>";
                $pendinglabcount = $plink;
            }
            $item = array(
                $completedlabcount,
                $pendinglabcount
            );
            array_push($rows, $item);
        }
        db_set_active('default'); // We need to call the main (drupal) db back      
        db_set_active(); // without the paramater means set back to the default for the site
        $count = bootstrap_table_format($headers, $rows);
        return $count;
    } else if ($status == "completed") {
        $rows = array();
        if ($sub_type == 'TBC') {
            $headers = array(
                "Completed Book"
            );
            $query = db_select('foss_type');
            $query->fields('foss_type', array(
                'id'
            ));
            $query->fields('foss_type', array(
                'foss_name'
            ));
            $query->fields('foss_type', array(
                'tbc'
            ));
            $query->fields('foss_type', array(
                'tbc_completed'
            ));
            $query->condition('foss_name', $foss_type);
            $query->condition('tbc', 1);
            $result = $query->execute();
            $foss_detail = $result->fetchObject();
            $foss_type = $foss_detail->foss_name;
            db_set_active($foss_type);
            if ($foss_detail->foss_name != 'Python') {
                db_set_active($foss_detail->foss_name); //Active other database
                if ($foss_detail->foss_name != 'eSim' && $foss_detail->foss_name != 'OpenFOAM' && $foss_detail->foss_name != 'OR-Tools') {
                    if ($foss_detail->foss_name != 'DWSIM') {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    } else {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.actual_completion_date) >= :startdate AND FROM_UNIXTIME(po.actual_completion_date) <= :enddate ", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    }
                } else {
                    $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status =3 AND pe.approval_status =1 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                        ':value' => "%" . db_like($extrafilter) . "%",
                        ':startdate' => $startdate,
                        ':enddate' => $enddate
                    ));
                }
                $completedbookcount = $query2->fetchObject()->book_count;
                if ($foss_detail->tbc_completed != "" && $foss_detail->tbc_completed != null && $link_flag != 1) {
                    $clink = "<a href=" . $foss_detail->tbc_completed . " target='_blank'>" . $completedbookcount . "</a>";
                    $completedbookcount = $clink;
                }
                $item = array(
                    $completedbookcount
                );
                array_push($rows, $item);
            } else {
                //For Python TBC
                db_set_active($foss_detail->foss_name); //Active other database
                $query5 = db_select('tbc_book');
                $query5->addExpression('count(*)', 'count');
                $query5->condition('approved', 1);
                //$query5->condition('author', '%'.$extrafilter.'%', 'LIKE');
                $result5 = $query5->execute();
                $completedbookcount = $result5->fetchObject()->count;
                if ($foss_detail->tbc_completed != "" && $foss_detail->tbc_completed != null && $link_flag != 1) {
                    $clink = "<a href=" . $foss_detail->tbc_completed . " target='_blank'>" . $completedbookcount . "</a>";
                    $completedbookcount = $clink;
                }
                $item = array(
                    $completedbookcount
                );
                array_push($rows, $item);
            }
        } else {
            $headers = array(
                "Completed Labs"
            );
            $query = db_select('foss_type');
            $query->fields('foss_type', array(
                'id'
            ));
            $query->fields('foss_type', array(
                'foss_name'
            ));
            $query->fields('foss_type', array(
                'lab_migration'
            ));
            $query->fields('foss_type', array(
                'lm_completed'
            ));
            $query->condition('foss_name', $foss_type);
            $query->condition('lab_migration', 1);
            $result = $query->execute();
            $foss_detail = $result->fetchObject();
            db_set_active($foss_detail->foss_name); //Active other database
            $query2 = db_query("SELECT COUNT(*) AS count from lab_migration_proposal WHERE approval_status=3 AND city 			LIKE :value AND FROM_UNIXTIME(approval_date) >=:startdate AND FROM_UNIXTIME(approval_date) <=:enddate", array(
                ':value' => "%" . db_like($extrafilter) . "%",
                ':startdate' => $startdate,
                ':enddate' => $enddate
            ));
            $completedlabcount = $query2->fetchObject()->count;
            if ($foss_detail->lm_completed != "" && $foss_detail->lm_completed != null && $link_flag != 1) {
                $clink = "<a href=" . $foss_detail->lm_completed . " target='_blank'>" . $completedlabcount . "</a>";
                $completedlabcount = $clink;
            }
            $item = array(
                $completedlabcount
            );
            array_push($rows, $item);
        }
        db_set_active('default'); // We need to call the main (drupal) db back      
        db_set_active(); // without the paramater means set back to the default for the site
        $count = bootstrap_table_format($headers, $rows);
    } else if ($status == "pending") {
        $rows = array();
        if ($sub_type == 'TBC') {
            $headers = array(
                "Books in Progress"
            );
            $query = db_select('foss_type');
            $query->fields('foss_type', array(
                'id'
            ));
            $query->fields('foss_type', array(
                'foss_name'
            ));
            $query->fields('foss_type', array(
                'tbc'
            ));
            $query->fields('foss_type', array(
                'tbc_pending'
            ));
            $query->condition('foss_name', $foss_type);
            $query->condition('tbc', 1);
            $result = $query->execute();
            $foss_detail = $result->fetchObject();
            $foss_type = $foss_detail->foss_name;
            db_set_active($foss_type);
            if ($foss_detail->foss_name != 'Python') {
                db_set_active($foss_detail->foss_name); //Active other database
                if ($foss_detail->foss_name != 'eSim' && $foss_detail->foss_name != 'OpenFOAM' && $foss_detail->foss_name != 'OR-Tools') {
                    if ($foss_detail->foss_name != 'DWSIM') {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    } else {
                        $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND pe.category>0 AND po.city LIKE :value AND FROM_UNIXTIME(po.actual_completion_date) >= :startdate AND FROM_UNIXTIME(po.actual_completion_date) <= :enddate ", array(
                            ':value' => "%" . db_like($extrafilter) . "%",
                            ':startdate' => $startdate,
                            ':enddate' => $enddate
                        ));
                    }
                } else {
                    $query2 = db_query("SELECT COUNT( pe.book ) AS book_count FROM textbook_companion_preference pe LEFT JOIN textbook_companion_proposal po ON pe.proposal_id = po.id WHERE po.proposal_status !=3 AND pe.approval_status =1 AND po.city LIKE :value AND FROM_UNIXTIME(po.completion_date) >= :startdate AND FROM_UNIXTIME(po.completion_date) <= :enddate", array(
                        ':value' => "%" . db_like($extrafilter) . "%",
                        ':startdate' => $startdate,
                        ':enddate' => $enddate
                    ));
                }
                $pendingbookcount = $query2->fetchObject()->book_count;
                if ($foss_detail->tbc_pending != "" && $foss_detail->tbc_pending != null && $link_flag != 1) {
                    $plink = "<a href=" . $foss_detail->tbc_pending . " target='_blank'>" . $pendingbookcount . "</a>";
                    $pendingbookcount = $plink;
                }
                $item = array(
                    $pendingbookcount
                );
                array_push($rows, $item);
            } else {
                //For Python TBC
                db_set_active($foss_detail->foss_name); //Active other database
                $query5 = db_select('tbc_book');
                $query5->addExpression('count(*)', 'count');
                $query5->condition('approved', 1, '<>');
                //$query5->condition('author', '%'.$extrafilter.'%', 'LIKE');
                $result5 = $query5->execute();
                $pendingbookcount = $result5->fetchObject()->count;
                if ($foss_detail->tbc_pending != "" && $foss_detail->tbc_pending != null && $link_flag != 1) {
                    $plink = "<a href=" . $foss_detail->tbc_pending . " target='_blank'>" . $pendingbookcount . "</a>";
                    $pendingbookcount = $plink;
                }
                $item = array(
                    $pendingbookcount
                );
                array_push($rows, $item);
            }
        } else {
            $headers = array(
                "Labs in Progress"
            );
            $query = db_select('foss_type');
            $query->fields('foss_type', array(
                'id'
            ));
            $query->fields('foss_type', array(
                'foss_name'
            ));
            $query->fields('foss_type', array(
                'lab_migration'
            ));
            $query->fields('foss_type', array(
                'lm_pending'
            ));
            $query->condition('foss_name', $foss_type);
            $query->condition('lab_migration', 1);
            $result = $query->execute();
            $foss_detail = $result->fetchObject();
            db_set_active($foss_detail->foss_name); //Active other database
            $query2 = db_query("SELECT COUNT(*) AS count from lab_migration_proposal WHERE approval_status=1 AND city 			LIKE :value AND FROM_UNIXTIME(approval_date) >=:startdate AND FROM_UNIXTIME(approval_date) <=:enddate", array(
                ':value' => "%" . db_like($extrafilter) . "%",
                ':startdate' => $startdate,
                ':enddate' => $enddate
            ));
            $pendinglabcount = $query2->fetchObject()->count;
            if ($foss_detail->lm_pending != "" && $foss_detail->lm_pending != null && $link_flag != 1) {
                $plink = "<a href=" . $foss_detail->lm_pending . " target='_blank'>" . $pendinglabcount . "</a>";
                $pendinglabcount = $plink;
            }
            $item = array(
                $pendinglabcount
            );
            array_push($rows, $item);
        }
        db_set_active('default'); // We need to call the main (drupal) db back      
        db_set_active(); // without the paramater means set back to the default for the site
        $count = bootstrap_table_format($headers, $rows);
    }
    return $count;
}


function _city_name_autocomplete($foss_type, $foss_project, $country_value, $state_value, $string)
{
    
    $query = db_select('foss_type');
    $query->fields('foss_type', array(
        'id'
    ));
    $query->fields('foss_type', array(
        'foss_name'
    ));
    $query->condition('id', $foss_type);
    $result = $query->execute();
    $foss_detail = $result->fetchObject();
    if ($foss_project == 1) {
        $sub_project = "textbook_companion_proposal";
    } else {
        $sub_project = "lab_migration_proposal";
    }
    $matches = array();
    // Some fantasy DB table which holds cities
    db_set_active($foss_detail->foss_name); //Active other database
    $query = db_select($sub_project, $sub_project);
    // Select rows that match the string
    $return = $query->fields($sub_project, array(
        'city'
    ))->condition($sub_project . '.city', '%' . db_like($string) . '%', 'LIKE')->range(0, 10)->execute();
    db_set_active('default'); // We need to call the main (drupal) db back      
    // add matches to $matches  
    foreach ($return as $row) {
        $matches[$row->city] = check_plain($row->city);
    }
    // return for JS
    drupal_json_output($matches);
}


function ajax_state_list_dependent_dropdown_callback($form, &$form_state)
{
    $foss_type = $form['foss_type']['#options'][$form_state['values']['foss_type']];
    $foss_sub_project = $form['foss_sub_project']['#options'][$form_state['values']['foss_sub_project']];
    $country = $form['countryname']['#options'][$form_state['values']['countryname']];
    $options = array();
    
    if ($foss_sub_project == "Textbook Companion") {
        $sub_project = "textbook_companion_proposal";
        
        db_set_active($foss_type); //Active other database
        
        $options[0] = '--------------';
        $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country
       ";
        $args = array(
            ":country" => $country
        );
        $result = db_query($query, $args);
        while ($state_detail = $result->fetchObject()) {
            $options[$state_detail->state] = $state_detail->state;
        }
        
    } else if ($foss_project == "Lab Migration") {
        $sub_project = "lab_migration_proposal";
        
        db_set_active($foss_type); //Active other database
        //$options    = array();
        $options[0] = '--------------';
        $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country
       ";
        $args = array(
            ":country" => $country
        );
        $result = db_query($query, $args);
        while ($state_detail = $result->fetchObject()) {
            $options[$state_detail->state] = $state_detail->state;
        }
        
    } else {
        $sub_project = "workshop";
        $foss_type_db = 'default';
        
        db_set_active($foss_type_db); //Active other database
        //$options    = array();
        $options[0] = '--------------';
        $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country and foss_name = :foss_name
       ";
        $args = array(
            ":country" => $country,
            ":foss_name" => $foss_type
        );
        $result = db_query($query, $args);
        while ($state_detail = $result->fetchObject()) {
            $options[$state_detail->state] = $state_detail->state;
        }
    }
    
    
    db_set_active('default'); // We need to call the main (drupal) db back      
    
    $form['statename']['#options'] = $options;
    $commands[] = ajax_command_replace("#load_state", drupal_render($form['statename']));
    
    $optionscity = array();
    $optionscity[0] = '--------------';
    $form['cityname']['#options'] = $optionscity;
    $commands[] = ajax_command_replace("#load_city", drupal_render($form['cityname']));
    
    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}


function ajax_city_list_dependent_dropdown_callback($form, &$form_state)
{
    $foss_type = $form['foss_type']['#options'][$form_state['values']['foss_type']];
    $foss_sub_project = $form['foss_sub_project']['#options'][$form_state['values']['foss_sub_project']];
    $country = $form['countryname']['#options'][$form_state['values']['countryname']];
    $state = $form['statename']['#options'][$form_state['values']['statename']];
    if ($foss_sub_project == "Textbook Companion") {
        $sub_project = "textbook_companion_proposal";
        
        db_set_active($foss_type); //Active other database
        $options = array();
        $options[0] = '--------------';
        $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country and state = :state
       ";
        $args = array(
            ":country" => $country,
            ":state" => $state
        );
        $result = db_query($query, $args);
        while ($city_detail = $result->fetchObject()) {
            $options[$city_detail->city] = $city_detail->city;
        }
        
    } else if ($foss_project == "Lab Migration") {
        $sub_project = "lab_migration_proposal";
        
        db_set_active($foss_type); //Active other database
        $options = array();
        $options[0] = '--------------';
        $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country and state = :state
       ";
        $args = array(
            ":country" => $country,
            ":state" => $state
        );
        $result = db_query($query, $args);
        while ($city_detail = $result->fetchObject()) {
            $options[$city_detail->city] = $city_detail->city;
        }
        
    } else {
        $sub_project = "workshop";
        $foss_type_db = 'default';
        
        db_set_active($foss_type_db); //Active other database
        $options = array();
        $options[0] = '--------------';
        $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country and state = :state and foss_name = :foss_name
       ";
        $args = array(
            ":country" => $country,
            ":state" => $state,
            ":foss_name" => $foss_type
        );
        $result = db_query($query, $args);
        while ($city_detail = $result->fetchObject()) {
            $options[$city_detail->city] = $city_detail->city;
        }
    }
    
    
    db_set_active('default'); // We need to call the main (drupal) db back      
    
    $form['cityname']['#options'] = $options;
    $commands[] = ajax_command_replace("#load_city", drupal_render($form['cityname']));
    
    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}


function get_country_list($foss_type,$foss_sub_project)
{
    
    if ($foss_sub_project != 0) {
        
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'id'
        ));
        $query->fields('foss_type', array(
            'foss_name'
        ));
        $query->condition('id', $foss_type);
        $result = $query->execute();
        $foss_detail = $result->fetchObject();
        $foss_type = $foss_detail->foss_name;
        $options = array();
        
        if ($foss_sub_project == 1) {
            $sub_project = "textbook_companion_proposal";
            
            db_set_active($foss_type); //Active other database
            
            $options[0] = '--------------';
            $query = "
       SELECT Distinct(country) FROM " . $sub_project . "
       ";
            
            $result = db_query($query);
            while ($country_detail = $result->fetchObject()) {
                $options[$country_detail->country] = $country_detail->country;
            }
            
        } else if ($foss_sub_project == 2) {
            $sub_project = "lab_migration_proposal";
            
            db_set_active($foss_type); //Active other database
            // $options    = array();
            $options[0] = '--------------';
            $query = "
       SELECT Distinct(country) FROM " . $sub_project . "
       ";
            
            $result = db_query($query);
            while ($country_detail = $result->fetchObject()) {
                $options[$country_detail->country] = $country_detail->country;
            }
            
        } else if ($foss_sub_project == 3) {
            $sub_project = "workshop";
            $foss_type_db = 'default';
            
            db_set_active($foss_type_db); //Active other database
            //$options    = array();
            $options[0] = '--------------';
            $query = "
       SELECT Distinct(country) FROM " . $sub_project . "
       WHERE foss_name = :foss_name
       ";
            $args = array(
                ":foss_name" => $foss_type
            );
            $result = db_query($query, $args);
            while ($country_detail = $result->fetchObject()) {
                $options[$country_detail->country] = $country_detail->country;
            }
            
        }
        
        
        db_set_active('default'); // We need to call the main (drupal) db back 
        
        
        return $options;
    } else {
        $options = array();
        return $options;
    }
}






function get_state_list($foss_type, $foss_sub_project, $country)
{
    
    if ($foss_sub_project != 0 && $country != "") {
        
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'id'
        ));
        $query->fields('foss_type', array(
            'foss_name'
        ));
        $query->condition('id', $foss_type);
        $result = $query->execute();
        $foss_detail = $result->fetchObject();
        $foss_type = $foss_detail->foss_name;
        $options = array();
        
        if ($foss_sub_project == 1) {
            $sub_project = "textbook_companion_proposal";
            
            db_set_active($foss_type); //Active other database
            
            $options[0] = '--------------';
            $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country
       ";
            $args = array(
                ":country" => $country
            );
            $result = db_query($query, $args);
            while ($state_detail = $result->fetchObject()) {
                $options[$state_detail->state] = $state_detail->state;
            }
            
        } else if ($foss_sub_project == 2) {
            $sub_project = "lab_migration_proposal";
            
            db_set_active($foss_type); //Active other database
            // $options    = array();
            $options[0] = '--------------';
            $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country
       ";
            $args = array(
                ":country" => $country
            );
            $result = db_query($query, $args);
            while ($state_detail = $result->fetchObject()) {
                $options[$state_detail->state] = $state_detail->state;
            }
            
        } else if ($foss_sub_project == 3) {
            $sub_project = "workshop";
            $foss_type_db = 'default';
            
            db_set_active($foss_type_db); //Active other database
            //$options    = array();
            $options[0] = '--------------';
            $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country and foss_name = :foss_name
       ";
            $args = array(
                ":country" => $country,
                ":foss_name" => $foss_type
            );
            $result = db_query($query, $args);
            while ($state_detail = $result->fetchObject()) {
                $options[$state_detail->state] = $state_detail->state;
            }
            
        }
        
        
        db_set_active('default'); // We need to call the main (drupal) db back 
        
        
        return $options;
    } else {
        $options = array();
        return $options;
    }
}

function get_city_list($foss_type, $foss_sub_project, $country, $state)
{
    
    if ($foss_sub_project != 0 && $country != "" && $state != "") {
        
        $query = db_select('foss_type');
        $query->fields('foss_type', array(
            'id'
        ));
        $query->fields('foss_type', array(
            'foss_name'
        ));
        $query->condition('id', $foss_type);
        $result = $query->execute();
        $foss_detail = $result->fetchObject();
        $foss_type = $foss_detail->foss_name;
        
        if ($foss_sub_project == 1) {
            $sub_project = "textbook_companion_proposal";
            db_set_active($foss_type); //Active other database
            $options = array();
            $options[0] = '--------------';
            $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country and state = :state
       ";
            $args = array(
                ":country" => $country,
                ":state" => $state
            );
            $result = db_query($query, $args);
            while ($city_detail = $result->fetchObject()) {
                $options[$city_detail->city] = $city_detail->city;
            }
            
        } else if ($foss_sub_project == 2) {
            $sub_project = "lab_migration_proposal";
            db_set_active($foss_type); //Active other database
            $options = array();
            $options[0] = '--------------';
            $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country and state = :state
       ";
            $args = array(
                ":country" => $country,
                ":state" => $state
            );
            $result = db_query($query, $args);
            while ($city_detail = $result->fetchObject()) {
                $options[$city_detail->city] = $city_detail->city;
            }
            
            
        } else if ($foss_sub_project == 3) {
            $sub_project = "workshop";
            $foss_type_db = 'default';
            
            db_set_active($foss_type_db); //Active other database
            $options = array();
            $options[0] = '--------------';
            $query = "
       SELECT * FROM " . $sub_project . "
       WHERE country = :country and state = :state and foss_name = :foss_name
       ";
            $args = array(
                ":country" => $country,
                ":state" => $state,
                ":foss_name" => $foss_type
            );
            $result = db_query($query, $args);
            while ($city_detail = $result->fetchObject()) {
                $options[$city_detail->city] = $city_detail->city;
            }
        }
        
        
        
        db_set_active('default'); // We need to call the main (drupal) db back 
        
        
        return $options;
    } else {
        $options = array();
        $options[0] = '--------------';
        return $options;
    }
}

function _state_name_autocomplete($foss_type, $foss_project, $country_value, $string)
{
    
    /*$query = db_select('foss_type');
    $query->fields('foss_type', array(
    'id'
    ));
    $query->fields('foss_type', array(
    'foss_name'
    ));
    $query->condition('id', $foss_type);
    $result = $query->execute();
    $foss_detail = $result->fetchObject();*/
    
    $query = "
       SELECT * FROM foss_type
       WHERE id = :id
       ";
    $args = array(
        ":id" => $foss_type
    );
    $result = db_query($query, $args);
    $foss_detail = $result->fetchObject();
    
    if ($foss_project == 1) {
        $sub_project = "textbook_companion_proposal";
    } else if ($foss_project == 2) {
        $sub_project = "lab_migration_proposal";
    } else {
        $sub_project = "workshop";
    }
    
    if ($foss_type != 3) {
        $matches = array();
        // Some fantasy DB table which holds cities
        db_set_active($foss_detail->foss_name); //Active other database
        $query = db_select($sub_project, $sub_project);
        // Select rows that match the string
        $return = $query->fields($sub_project, array(
            'state'
        ))->condition($sub_project . '.state', '%' . db_like($string) . '%', 'LIKE')->range(0, 10)->execute();
        db_set_active('default'); // We need to call the main (drupal) db back      
        // add matches to $matches  
        foreach ($return as $row) {
            $matches[$row->state] = check_plain($row->state);
        }
        // return for JS
        drupal_json_output($matches);
    }
}


function workshop_add_form($form, &$form_state, $workshop_id = 0, $no_js_use = FALSE)
{
    $query = "
       SELECT * FROM workshop
       WHERE w_id = :workshop_id
       ";
    $args = array(
        ":workshop_id" => $workshop_id
    );
    $result = db_query($query, $args);
    $row = $result->fetchObject();
    $form = array();
    /*
    $form['testimonial_fieldset'] = array(
    '#type' => 'fieldset',
    '#tree'=>TRUE,
    //'#title' => t('Add Testimonial'),
    '#prefix' => '<div id="testimonial-fieldset-wrapper">',
    '#suffix' => '</div>',
    );
    
    if (empty($form_state['num_testimonial'])) {
    $form_state['num_testimonial'] = 1;
    }
    $temp=0;
    for ($i = 0; $i < $form_state['num_testimonial']; $i++) {
    $temp=$i;
    $form['testimonial_fieldset'][$i]["t_text"] = array(
    "#type" => "item",
    "#markup"=>"<h4><label>Testimonial : ".($temp+1)."</label></h4>"
    );
    $form['testimonial_fieldset'][$i]["t_name"] = array(
    "#type" => "textfield",
    "#title" => "Name",
    "#default_value" => "",
    //"#required" => TRUE
    );
    $form['testimonial_fieldset'][$i]["t_department"] = array(
    "#type" => "textfield",
    "#title" => "Department",
    "#default_value" => "",
    //"#required" => TRUE
    );
    $form['testimonial_fieldset'][$i]["t_university"] = array(
    "#type" => "textfield",
    "#title" => "University",
    "#default_value" => "",
    //"#required" => TRUE
    );
    $form['testimonial_fieldset'][$i]["t_body"] = array(
    "#type" => "textarea",
    "#title" => "Testimonial",
    //"#required" => TRUE
    );
    
    
    }
    
    $form["testimonial_count"] = array(
    "#type" => "hidden",
    "#value" => $temp,
    );
    
    
    $form['testimonial_fieldset']['add_testimonial'] = array(
    '#type' => 'submit',
    '#value' => t('Add More Testimonial'),
    '#limit_validation_errors' => array(),
    '#submit' => array('testimonial_add_more_add_one'),
    '#ajax' => array(
    'callback' => 'testimonial_add_more_callback',
    'wrapper' => 'testimonial-fieldset-wrapper',
    ),
    );
    if ($form_state['num_testimonial'] > 1) {
    $form['testimonial_fieldset']['remove_testimonial'] = array(
    '#type' => 'submit',
    '#value' => t('Remove Testimonial'),
    '#limit_validation_errors' => array(),
    '#submit' => array('testimonial_add_more_remove_one'),
    '#ajax' => array(
    'callback' => 'testimonial_add_more_callback',
    'wrapper' => 'testimonial-fieldset-wrapper',
    ),
    );
    }
    
    
    if ($no_js_use) {
    if (!empty($form['testimonial_fieldset']['remove_testimonial']['#ajax'])) {
    unset($form['testimonial_fieldset']['remove_testimonial']['#ajax']);
    }
    unset($form['testimonial_fieldset']['add_testimonial']['#ajax']);
    }    
    
    */
    if ($workshop_id == 0) {
        $form['foss_select'] = array(
            '#type' => 'select',
            '#title' => t('Select FOSS under which event took place '),
            '#options' => get_first_dropdown_options_foss_name(),
            '#default_value' => '',
            "#required" => TRUE
        );
        $form['type'] = array(
            '#type' => 'select',
            '#title' => t('Selected Type'),
            '#options' => array(
                'Workshop' => t('Workshop'),
                'Conference/Seminar' => t('Conference/Seminar')
            ),
            '#default_value' => '',
            "#required" => TRUE
        );
        $form["name"] = array(
            "#type" => "textfield",
            "#title" => "Name",
            "#default_value" => '',
            "#required" => TRUE
        );
        $form['start_date'] = array(
            '#type' => 'date_popup',
            '#title' => t('Select Start Date Of Event :'),
            '#date_increment' => 15,
            '#date_year_range' => '2008:+3',
            '#default_value' => '',
            '#date_format' => 'Y-m-d',
            '#attributes' => array(
                'autocomplete' => 'off',
                'readonly' => 'readonly'
            ),
            "#required" => TRUE
        );
        $form['end_date'] = array(
            '#type' => 'date_popup',
            '#title' => t('Select End Date Of Event:'),
            '#date_increment' => 15,
            '#date_year_range' => '2008:+3',
            '#default_value' => '',
            '#date_format' => 'Y-m-d',
            '#attributes' => array(
                'autocomplete' => 'off',
                'readonly' => 'readonly'
            ),
            "#required" => TRUE
        );
        $form["venue"] = array(
            "#type" => "textfield",
            "#title" => "Venue",
            "#default_value" => '',
            "#required" => TRUE
        );
        $form["street"] = array(
            "#type" => "textfield",
            "#title" => "Street",
            "#default_value" => '',
            "#required" => TRUE
        );
        $form['country'] = array(
            '#type' => 'select',
            '#title' => t('Country'),
            '#options' => array(
                'India' => 'India',
                'Others' => 'Others'
            ),
            '#required' => TRUE,
            '#tree' => TRUE,
            '#validated' => TRUE
        );
        $form['other_country'] = array(
            '#type' => 'textfield',
            '#title' => t('Other than India'),
            '#size' => 100,
            '#attributes' => array(
                'placeholder' => t('Enter your country name')
            ),
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'Others'
                    )
                )
            )
        );
        $form['other_state'] = array(
            '#type' => 'textfield',
            '#title' => t('State other than India'),
            '#size' => 100,
            '#attributes' => array(
                'placeholder' => t('Enter your state/region name')
            ),
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'Others'
                    )
                )
            )
        );
        $form['other_city'] = array(
            '#type' => 'textfield',
            '#title' => t('City other than India'),
            '#size' => 100,
            '#attributes' => array(
                'placeholder' => t('Enter your city name')
            ),
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'Others'
                    )
                )
            )
        );
        $form['all_state'] = array(
            '#type' => 'select',
            '#title' => t('State'),
            '#options' => _list_of_states(),
            '#validated' => TRUE,
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'India'
                    )
                )
            )
        );
        $form['city'] = array(
            '#type' => 'select',
            '#title' => t('City'),
            '#options' => _list_of_cities(),
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'India'
                    )
                )
            )
        );
        $form['pincode'] = array(
            '#type' => 'textfield',
            '#title' => t('Pincode'),
            '#size' => 30,
            '#maxlength' => 6,
            '#required' => False,
            '#attributes' => array(
                'placeholder' => 'Enter pincode....'
            )
        );
        /*$form['country'] = array(
        '#type' => 'select',
        '#title' => t('Select Country'),
        '#options' => get_country_dropdown_options(),
        '#default_value' => "",
        '#validated' => TRUE,
        "#required" => TRUE,
        '#ajax' => array(
        'callback' =>'ajax_country_dependent_dropdown_callback',
        'wrapper' => array('dropdown-state-replace','extra'),
        'progress' => array(
        'message' => '',
        ),
        ),
        
        );
        
        $form["state"] = array(
        "#type" => "select",
        '#title' => t('Select State'),
        '#options' => ajax_getstate_callback($country),
        "#required" => TRUE,
        '#validated' => TRUE,
        '#prefix' => '<div id="dropdown-state-replace" ',
        '#suffix' => '</div>',
        '#ajax' => array(
        'callback' =>'ajax_state_dependent_dropdown_callback',
        'wrapper' => 'dropdown-city-replace',
        'progress' => array(
        'message' => '',
        ), 
        ),
        
        );
        $form["city"] = array(
        "#type" => "select",
        '#title' => t('Select City'),
        '#options' => ajax_getcity_callback($state),
        "#required" => TRUE,
        '#validated' => TRUE,
        '#prefix' => '<div id="dropdown-city-replace" ',
        '#suffix' => '</div>',
        "#default_value" => '',
        
        );
        
        $form["pincode"] = array(
        "#type" => "textfield",
        "#title" => "Pincode",
        "#default_value" => '',
        "#required" => TRUE
        );
        */
        $form["no_of_participant"] = array(
            "#type" => "textfield",
            "#title" => "Number Of Participants",
            "#default_value" => '',
            "#required" => TRUE
        );
        $form["body"] = array(
            "#type" => "textarea",
            "#title" => "Description",
            "#default_value" => '',
            "#required" => TRUE
        );
        $form['speakers_fieldset'] = array(
            '#type' => 'fieldset',
            '#tree' => TRUE,
            '#prefix' => '<div id="speakers-fieldset-wrapper">',
            '#suffix' => '</div>'
        );
        if (empty($form_state['num_speakers'])) {
            $form_state['num_speakers'] = 1;
        }
        $temp = 0;
        for ($i = 0; $i < $form_state['num_speakers']; $i++) {
            $temp1 = $i;
            $form['speakers_fieldset'][$i]["s_text"] = array(
                "#type" => "item",
                "#markup" => "<h4><label>Speaker : " . ($temp1 + 1) . "</label></h4>"
            );
            $form['speakers_fieldset'][$i]["speakername"] = array(
                "#type" => "textfield",
                "#title" => "Name",
                "#default_value" => ""
            );
            $form['speakers_fieldset'][$i]["institute"] = array(
                "#type" => "textfield",
                "#title" => "Institute",
                "#default_value" => ""
            );
            $form['speakers_fieldset'][$i]["place"] = array(
                "#type" => "textfield",
                "#title" => "Place",
                "#default_value" => ""
            );
        }
        $form["speakers_count"] = array(
            "#type" => "hidden",
            "#value" => $temp1
        );
        $form['speakers_fieldset']['add_speakers'] = array(
            '#type' => 'submit',
            '#value' => t('Add Speaker'),
            '#limit_validation_errors' => array(),
            '#submit' => array(
                'speakers_add_more_add_one'
            ),
            '#ajax' => array(
                'callback' => 'speakers_add_more_callback',
                'wrapper' => 'speakers-fieldset-wrapper'
            )
        );
        if ($form_state['num_speakers'] > 1) {
            $form['speakers_fieldset']['remove_speakers'] = array(
                '#type' => 'submit',
                '#value' => t('Remove Speaker'),
                '#limit_validation_errors' => array(),
                '#submit' => array(
                    'speakers_add_more_remove_one'
                ),
                '#ajax' => array(
                    'callback' => 'speakers_add_more_callback',
                    'wrapper' => 'speakers-fieldset-wrapper'
                )
            );
        }
        if ($no_js_use) {
            if (!empty($form['speakers_fieldset']['remove_speakers']['#ajax'])) {
                unset($form['speakers_fieldset']['remove_speakers']['#ajax']);
            }
            unset($form['speakers_fieldset']['add_speakers']['#ajax']);
        }
        $form['testimonial_fieldset'] = array(
            '#type' => 'fieldset',
            '#tree' => TRUE,
            '#prefix' => '<div id="testimonial-fieldset-wrapper">',
            '#suffix' => '</div>'
        );
        if (empty($form_state['num_testimonial'])) {
            $form_state['num_testimonial'] = 1;
        }
        $temp = 0;
        for ($i = 0; $i < $form_state['num_testimonial']; $i++) {
            $temp = $i;
            $form['testimonial_fieldset'][$i]["t_text"] = array(
                "#type" => "item",
                "#markup" => "<h4><label>Testimonial : " . ($temp + 1) . "</label></h4>"
            );
            $form['testimonial_fieldset'][$i]["t_name"] = array(
                "#type" => "textfield",
                "#title" => "Name",
                "#default_value" => ""
            );
            $form['testimonial_fieldset'][$i]["t_department"] = array(
                "#type" => "textfield",
                "#title" => "Department",
                "#default_value" => ""
            );
            $form['testimonial_fieldset'][$i]["t_university"] = array(
                "#type" => "textfield",
                "#title" => "University",
                "#default_value" => ""
            );
            $form['testimonial_fieldset'][$i]["t_body"] = array(
                "#type" => "textarea",
                "#title" => "Testimonial"
            );
        }
        $form["testimonial_count"] = array(
            "#type" => "hidden",
            "#value" => $temp
        );
        $form['testimonial_fieldset']['add_testimonial'] = array(
            '#type' => 'submit',
            '#value' => t('Add Testimonial'),
            '#limit_validation_errors' => array(),
            '#submit' => array(
                'testimonial_add_more_add_one'
            ),
            '#ajax' => array(
                'callback' => 'testimonial_add_more_callback',
                'wrapper' => 'testimonial-fieldset-wrapper'
            )
        );
        if ($form_state['num_testimonial'] > 1) {
            $form['testimonial_fieldset']['remove_testimonial'] = array(
                '#type' => 'submit',
                '#value' => t('Remove Testimonial'),
                '#limit_validation_errors' => array(),
                '#submit' => array(
                    'testimonial_add_more_remove_one'
                ),
                '#ajax' => array(
                    'callback' => 'testimonial_add_more_callback',
                    'wrapper' => 'testimonial-fieldset-wrapper'
                )
            );
        }
        if ($no_js_use) {
            if (!empty($form['testimonial_fieldset']['remove_testimonial']['#ajax'])) {
                unset($form['testimonial_fieldset']['remove_testimonial']['#ajax']);
            }
            unset($form['testimonial_fieldset']['add_testimonial']['#ajax']);
        }
        $form['names_fieldset'] = array(
            '#type' => 'fieldset',
            '#tree' => TRUE,
            '#prefix' => '<div id="names-fieldset-wrapper">',
            '#suffix' => '</div>'
        );
        if (empty($form_state['num_names'])) {
            $form_state['num_names'] = 1;
        }
        for ($i = 0; $i < $form_state['num_names']; $i++) {
            $form['names_fieldset'][$i]['name'] = array(
                '#title' => t('Add Event Image'),
                '#type' => 'file',
                '#weight' => '5',
                '#description' => t('Upload an image'),
                // We need this to know which file element this is.
                // By default drupal would name all as files[names_fieldset]
                '#name' => 'files[names_fieldset_' . $i . '_name]'
            );
        }
        $form['names_fieldset']['add_name'] = array(
            '#type' => 'submit',
            '#value' => t('Add Image'),
            '#limit_validation_errors' => array(),
            '#submit' => array(
                'workshop_add_more_add_one'
            ),
            '#ajax' => array(
                'callback' => 'workshop_add_more_callback',
                'wrapper' => 'names-fieldset-wrapper'
            )
        );
        if ($form_state['num_names'] > 1) {
            $form['names_fieldset']['remove_name'] = array(
                '#type' => 'submit',
                '#value' => t('Remove Image'),
                '#limit_validation_errors' => array(),
                '#submit' => array(
                    'workshop_add_more_remove_one'
                ),
                '#ajax' => array(
                    'callback' => 'workshop_add_more_callback',
                    'wrapper' => 'names-fieldset-wrapper'
                )
            );
        }
        if ($no_js_use) {
            if (!empty($form['names_fieldset']['remove_name']['#ajax'])) {
                unset($form['names_fieldset']['remove_name']['#ajax']);
            }
            unset($form['names_fieldset']['add_name']['#ajax']);
        }
    } else {
        $form = array();
        $form['foss_select'] = array(
            '#type' => 'select',
            '#title' => t('Select FOSS under which event took place '),
            '#options' => get_first_dropdown_options_foss_name(),
            '#default_value' => $row->foss_name,
            "#required" => TRUE
        );
        $form['type'] = array(
            '#type' => 'select',
            '#title' => t('Selected Type'),
            '#options' => array(
                'Workshop' => t('Workshop'),
                'Conference/Seminar' => t('Conference/Seminar')
            ),
            '#default_value' => $row->type,
            "#required" => TRUE
        );
        $form["name"] = array(
            "#type" => "textfield",
            "#title" => "Name",
            "#default_value" => $row->w_name,
            "#required" => TRUE
        );
        $form['start_date'] = array(
            '#type' => 'date_popup',
            '#title' => t('Select Start Date Of Event :'),
            '#date_increment' => 15,
            '#date_year_range' => '2008:+3',
            '#default_value' => $row->startdate,
            '#date_format' => 'Y-m-d',
            '#attributes' => array(
                'autocomplete' => 'off',
                'readonly' => 'readonly'
            ),
            "#required" => TRUE
        );
        $form['end_date'] = array(
            '#type' => 'date_popup',
            '#title' => t('Select End Date Of Event:'),
            '#date_increment' => 15,
            '#date_year_range' => '2008:+3',
            '#default_value' => $row->enddate,
            '#date_format' => 'Y-m-d',
            '#attributes' => array(
                'autocomplete' => 'off',
                'readonly' => 'readonly'
            ),
            "#required" => TRUE
        );
        $form["venue"] = array(
            "#type" => "textfield",
            "#title" => "Venue",
            "#default_value" => $row->venue,
            "#required" => TRUE
        );
        $form["street"] = array(
            "#type" => "textfield",
            "#title" => "Street",
            "#default_value" => $row->street,
            "#required" => TRUE
        );
        $form['country'] = array(
            '#type' => 'select',
            '#title' => t('Country'),
            '#options' => array(
                'India' => 'India',
                'Others' => 'Others'
            ),
            '#required' => TRUE,
            '#tree' => TRUE,
            '#validated' => TRUE,
            "#default_value" => $row->country
        );
        $form['other_country'] = array(
            '#type' => 'textfield',
            '#title' => t('Other than India'),
            '#size' => 100,
            '#attributes' => array(
                'placeholder' => t('Enter your country name')
            ),
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'Others'
                    )
                )
            ),
            "#default_value" => $row->country
        );
        $form['other_state'] = array(
            '#type' => 'textfield',
            '#title' => t('State other than India'),
            '#size' => 100,
            '#attributes' => array(
                'placeholder' => t('Enter your state/region name')
            ),
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'Others'
                    )
                )
            ),
            "#default_value" => $row->state
        );
        $form['other_city'] = array(
            '#type' => 'textfield',
            '#title' => t('City other than India'),
            '#size' => 100,
            '#attributes' => array(
                'placeholder' => t('Enter your city name')
            ),
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'Others'
                    )
                )
            ),
            "#default_value" => $row->city
        );
        $form['all_state'] = array(
            '#type' => 'select',
            '#title' => t('State'),
            '#options' => _list_of_states(),
            '#validated' => TRUE,
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'India'
                    )
                )
            ),
            "#default_value" => $row->state
        );
        $form['city'] = array(
            '#type' => 'select',
            '#title' => t('City'),
            '#options' => _list_of_cities(),
            '#states' => array(
                'visible' => array(
                    ':input[name="country"]' => array(
                        'value' => 'India'
                    )
                )
            ),
            "#default_value" => $row->city
        );
        $form['pincode'] = array(
            '#type' => 'textfield',
            '#title' => t('Pincode'),
            '#size' => 30,
            '#maxlength' => 6,
            '#required' => False,
            '#attributes' => array(
                'placeholder' => 'Enter pincode....'
            ),
            "#default_value" => $row->pincode
        );
        $form["no_of_participant"] = array(
            "#type" => "textfield",
            "#title" => "Number Of Participants",
            "#default_value" => $row->no_of_participant,
            "#required" => TRUE
        );
        $form["body"] = array(
            "#type" => "textarea",
            "#title" => "Description",
            "#default_value" => $row->body,
            "#required" => TRUE
        );
        /*Edit Speakers*/
        /*Edit Testimonial*/
        $query_t = db_select('testimonials');
        $query_t->fields('testimonials');
        $query_t->condition('w_id', $workshop_id);
        $result_t = $query_t->execute();
        $num_of_results = $result_t->rowCount();
        $form['testimonial_fieldset'] = array(
            '#type' => 'fieldset',
            '#tree' => TRUE,
            //'#title' => t('Add Testimonial'),
            '#prefix' => '<div id="testimonial-fieldset-wrapper">',
            '#suffix' => '</div>'
        );
        if ($num_of_results != 0) {
            $form_state['num_testimonial'] = $num_of_results;
            $temp = 0;
            $i = 0;
            while ($row_t = $result_t->fetchObject()) {
                $temp = $i;
                $form['testimonial_fieldset'][$i]["t_text"] = array(
                    "#type" => "item",
                    "#markup" => "<h4><label>Testimonial : " . ($temp + 1) . "</label></h4>"
                );
                $form['testimonial_fieldset'][$i]["t_id"] = array(
                    "#type" => "hidden",
                    "#default_value" => $row_t->t_id
                );
                $form['testimonial_fieldset'][$i]["t_name"] = array(
                    "#type" => "textfield",
                    "#title" => "Name",
                    "#default_value" => $row_t->name
                );
                $form['testimonial_fieldset'][$i]["t_department"] = array(
                    "#type" => "textfield",
                    "#title" => "Department",
                    "#default_value" => $row_t->department
                );
                $form['testimonial_fieldset'][$i]["t_university"] = array(
                    "#type" => "textfield",
                    "#title" => "University",
                    "#default_value" => $row_t->university
                );
                $form['testimonial_fieldset'][$i]["t_body"] = array(
                    "#type" => "textarea",
                    "#title" => "Testimonial",
                    "#default_value" => $row_t->body
                );
                $i++;
            }
            $form["testimonial_count"] = array(
                "#type" => "hidden",
                "#value" => $temp
            );
        } else {
            if (empty($form_state['num_testimonial'])) {
                $form_state['num_testimonial'] = 1;
            }
            $temp = 0;
            for ($i = 0; $i < $form_state['num_testimonial']; $i++) {
                $temp = $i;
                $form['testimonial_fieldset'][$i]["t_text"] = array(
                    "#type" => "item",
                    "#markup" => "<h4><label>Testimonial : " . ($temp + 1) . "</label></h4>"
                );
                $form['testimonial_fieldset'][$i]["t_name"] = array(
                    "#type" => "textfield",
                    "#title" => "Name",
                    "#default_value" => ""
                );
                $form['testimonial_fieldset'][$i]["t_department"] = array(
                    "#type" => "textfield",
                    "#title" => "Department",
                    "#default_value" => ""
                );
                $form['testimonial_fieldset'][$i]["t_university"] = array(
                    "#type" => "textfield",
                    "#title" => "University",
                    "#default_value" => ""
                );
                $form['testimonial_fieldset'][$i]["t_body"] = array(
                    "#type" => "textarea",
                    "#title" => "Testimonial"
                );
            }
            $form["testimonial_count"] = array(
                "#type" => "hidden",
                "#value" => $temp
            );
            $form['testimonial_fieldset']['add_testimonial'] = array(
                '#type' => 'submit',
                '#value' => t('Add testimonial'),
                '#limit_validation_errors' => array(),
                '#submit' => array(
                    'testimonial_add_more_add_one'
                ),
                '#ajax' => array(
                    'callback' => 'testimonial_add_more_callback',
                    'wrapper' => 'testimonial-fieldset-wrapper'
                )
            );
            if ($form_state['num_testimonial'] > 1) {
                $form['testimonial_fieldset']['remove_testimonial'] = array(
                    '#type' => 'submit',
                    '#value' => t('Remove'),
                    '#limit_validation_errors' => array(),
                    '#submit' => array(
                        'testimonial_add_more_remove_one'
                    ),
                    '#ajax' => array(
                        'callback' => 'testimonial_add_more_callback',
                        'wrapper' => 'testimonial-fieldset-wrapper'
                    )
                );
            }
            if ($no_js_use) {
                if (!empty($form['testimonial_fieldset']['remove_testimonial']['#ajax'])) {
                    unset($form['testimonial_fieldset']['remove_testimonial']['#ajax']);
                }
                unset($form['testimonial_fieldset']['add_testimonial']['#ajax']);
            }
        }
        $form['uploadphotos'] = array(
            '#markup' => '<h5><p> Edit Photos</p></h5>(Select Check box to delete existing photos)',
            '#prefix' => '<div id="uploaded_images"><table><tr>',
            '#suffix' => ''
        );
        $query = db_select('workshop');
        $query->fields('workshop');
        $query->condition('w_id', $workshop_id);
        $result = $query->execute();
        $row = $result->fetchObject();
        $query1 = db_select('workshop_images');
        $query1->fields('workshop_images');
        $query1->condition('w_id', $workshop_id);
        $result1 = $query1->execute();
        while ($row1 = $result1->fetchObject()) {
            $form['imagecheck@' . $row1->id] = array(
                '#type' => 'checkbox',
                '#field_suffix' => '<img style="width:100px; padding-left :20px;height:100px" src=' . $GLOBALS['base_url'] . "/events_images/" . str_replace(' ', '_', $row->w_name) . "/" . $row1->name . ' />'
            );
        }
        $form['enduploadphotos'] = array(
            '#markup' => '',
            '#prefix' => '',
            '#suffix' => '</tr></table></div>'
        );
        /*var_dump("testing....");
        $query = db_select('workshop');
        $query->fields('workshop');
        $query->condition('w_id',$workshop_id);
        $result = $query->execute();
        $row=$result->fetchObject();
        
        $query1 = db_select('workshop_images');
        $query1->fields('workshop_images');
        $query1->condition('w_id',$workshop_id);
        $result1 = $query1->execute();
        $i=0;
        while($row1 = $result1->fetchObject()) {
        $temp=$i++;
        $form['copy'.$temp] = array(
        '#type' =>'checkbox',
        '#value'=>$row1->name,
        '#field_suffix' => '<img style="width:100px; height:100px" src='.$GLOBALS['base_url']."/events_images/".str_replace(' ', '_',$row->w_name)."/".$row1->name.' />',
        );
        
        
        
        }*/
        $form['names_fieldset'] = array(
            '#type' => 'fieldset',
            '#tree' => TRUE,
            // '#title' => t('Add images'),
            '#prefix' => '<div id="names-fieldset-wrapper">',
            '#suffix' => '</div>'
        );
        if (empty($form_state['num_names'])) {
            $form_state['num_names'] = 1;
        }
        for ($i = 0; $i < $form_state['num_names']; $i++) {
            $form['names_fieldset'][$i]['name'] = array(
                '#title' => t('Add Event Image'),
                '#type' => 'file',
                '#weight' => '5',
                '#description' => t('Upload an image'),
                // We need this to know which file element this is.
                // By default drupal would name all as files[names_fieldset]
                '#name' => 'files[names_fieldset_' . $i . '_name]'
            );
        }
        $form['names_fieldset']['add_name'] = array(
            '#type' => 'submit',
            '#value' => t('Add one more'),
            '#limit_validation_errors' => array(),
            '#submit' => array(
                'workshop_add_more_add_one'
            ),
            '#ajax' => array(
                'callback' => 'workshop_add_more_callback',
                'wrapper' => 'names-fieldset-wrapper'
            )
        );
        if ($form_state['num_names'] > 1) {
            $form['names_fieldset']['remove_name'] = array(
                '#type' => 'submit',
                '#value' => t('Remove one'),
                '#limit_validation_errors' => array(),
                '#submit' => array(
                    'workshop_add_more_remove_one'
                ),
                '#ajax' => array(
                    'callback' => 'workshop_add_more_callback',
                    'wrapper' => 'names-fieldset-wrapper'
                )
            );
        }
        if ($no_js_use) {
            if (!empty($form['names_fieldset']['remove_name']['#ajax'])) {
                unset($form['names_fieldset']['remove_name']['#ajax']);
            }
            unset($form['names_fieldset']['add_name']['#ajax']);
        }
    }
    $form["workshop_id"] = array(
        "#type" => "hidden",
        "#value" => $workshop_id
    );
    $form["submit"] = array(
        "#type" => "submit",
        "#value" => "Submit"
    );
    return $form;
}


function workshop_add_form_validate($form, &$form_state)
{
    if ($form_state['values']['country'] == 'Others') {
        if ($form_state['values']['other_country'] == '') {
            form_set_error('other_country', t('Enter country name'));
            // $form_state['values']['country'] = $form_state['values']['other_country'];
        } else {
            $form_state['values']['country'] = $form_state['values']['other_country'];
        }
        if ($form_state['values']['other_state'] == '') {
            form_set_error('other_state', t('Enter state name'));
            // $form_state['values']['country'] = $form_state['values']['other_country'];
        } else {
            $form_state['values']['all_state'] = $form_state['values']['other_state'];
        }
        if ($form_state['values']['other_city'] == '') {
            form_set_error('other_city', t('Enter city name'));
            // $form_state['values']['country'] = $form_state['values']['other_country'];
        } else {
            $form_state['values']['city'] = $form_state['values']['other_city'];
        }
    } else {
        if ($form_state['values']['country'] == '') {
            form_set_error('country', t('Select country name'));
            // $form_state['values']['country'] = $form_state['values']['other_country'];
        }
        if ($form_state['values']['all_state'] == '') {
            form_set_error('all_state', t('Select state name'));
            // $form_state['values']['country'] = $form_state['values']['other_country'];
        }
        if ($form_state['values']['city'] == '') {
            form_set_error('city', t('Select city name'));
            // $form_state['values']['country'] = $form_state['values']['other_country'];
        }
    }
    if (isset($_FILES['files'])) {
        /* check for valid filename extensions */
        foreach ($_FILES['files']['name'] as $file_form_name => $file_name) {
            if ($file_name) {
                if (strstr($file_form_name, 'names_fieldset'))
                    $file_type = 'I';
                switch ($file_type) {
                    case 'I':
                        $allowed_extensions_str = variable_get('events_image_extensions', '');
                        break;
                }
                $allowed_extensions = explode(',', $allowed_extensions_str);
                $temp_extension = end(explode('.', strtolower($_FILES['files']['name'][$file_form_name])));
                if (!in_array($temp_extension, $allowed_extensions))
                    form_set_error($file_form_name, t('Only file with ' . $allowed_extensions_str . ' extensions can be uploaded.'));
                //if ($_FILES['files']['size'][$file_form_name] <= 0)
                //  form_set_error($file_form_name, t('File size cannot be zero.'));
            }
        }
    }
}


function speakers_add_more_callback($form, $form_state)
{
    return $form['speakers_fieldset'];
}


function speakers_add_more_add_one($form, &$form_state)
{
    $form_state['num_speakers']++;
    $form_state['rebuild'] = TRUE;
    //$form_state['no_redirect'] = TRUE;
}


function speakers_add_more_remove_one($form, &$form_state)
{
    if ($form_state['num_speakers'] > 1) {
        $form_state['num_speakers']--;
    }
    $form_state['rebuild'] = TRUE;
}


function testimonial_add_more_callback($form, $form_state)
{
    return $form['testimonial_fieldset'];
}


function testimonial_add_more_add_one($form, &$form_state)
{
    $form_state['num_testimonial']++;
    $form_state['rebuild'] = TRUE;
    //$form_state['no_redirect'] = TRUE;
}


function testimonial_add_more_remove_one($form, &$form_state)
{
    if ($form_state['num_testimonial'] > 1) {
        $form_state['num_testimonial']--;
    }
    $form_state['rebuild'] = TRUE;
}


function workshop_add_more_callback($form, $form_state)
{
    return $form['names_fieldset'];
}


function workshop_add_more_add_one($form, &$form_state)
{
    $form_state['num_names']++;
    $form_state['rebuild'] = TRUE;
    //$form_state['no_redirect'] = TRUE;
}


function workshop_add_more_remove_one($form, &$form_state)
{
    if ($form_state['num_names'] > 1) {
        $form_state['num_names']--;
    }
    $form_state['rebuild'] = TRUE;
}


function workshop_display_all()
{
    $page_content = "";
    $workshop_add_form = drupal_get_form("workshop_add_form");
    $page_content = drupal_render($workshop_add_form);
    return $page_content;
}


function get_first_dropdown_options_foss_name()
{
    $query = db_select('foss_type');
    $query->fields('foss_type', array(
        'id'
    ));
    $query->fields('foss_type', array(
        'foss_name'
    ));
    $result = $query->execute();
    $options = array();
    while ($foss_detail = $result->fetchObject()) {
        $options[$foss_detail->foss_name] = $foss_detail->foss_name;
    }
    $options["Others"] = "Others";
    return $options;
}


function get_country_dropdown_options()
{
    $query = db_select('Country');
    $query->fields('Country', array(
        'Code'
    ));
    $query->fields('Country', array(
        'Name'
    ));
    $result = $query->execute();
    $options = array();
    while ($country_detail = $result->fetchObject()) {
        $options[$country_detail->Code] = $country_detail->Name;
    }
    return $options;
}


function workshop_add_form_submit($form, &$form_state)
{
    $v = $form_state["values"];
    //$start_datetime= explode(" ",$v["start_date"]);
    //$end_datetime= explode(" ",$v["end_date"]);
    if ($v["workshop_id"]) {
        $query = db_update('workshop');
        $query->fields(array(
            'foss_name' => $v["foss_select"],
            'w_name' => $v["name"],
            'type' => $v["type"],
            'startdate' => $v["start_date"],
            'starttime' => "00:00",
            'enddate' => $v["end_date"],
            'endtime' => "00:00",
            'venue' => $v["venue"],
            'street' => $v["street"],
            'country' => $v["country"],
            'state' => $v["state"],
            'city' => $v["city"],
            'pincode' => $v["pincode"],
            'no_of_participant' => $v["no_of_participant"],
            'body' => $v["body"]
        ));
        $query->condition('w_id', $v["workshop_id"]);
        $result = $query->execute();
        /* For editing Testimonials */
        $testimonialupload = 0;
        for ($i = 0; $i <= $v["testimonial_count"]; $i++) {
            if ($v['testimonial_fieldset'][$i]["t_id"] != "") {
                if ($v['testimonial_fieldset'][$i]["t_name"] != "") {
                    $query = db_update('testimonials');
                    $query->fields(array(
                        'body' => $v['testimonial_fieldset'][$i]["t_body"],
                        'name' => $v['testimonial_fieldset'][$i]["t_name"],
                        'department' => $v['testimonial_fieldset'][$i]["t_department"],
                        'university' => $v['testimonial_fieldset'][$i]["t_university"]
                    ));
                    $query->condition('t_id', $v['testimonial_fieldset'][$i]["t_id"]);
                    $result = $query->execute();
                    if ($result != 0) {
                        $testimonialupload++;
                    }
                }
            } else {
                if ($v['testimonial_fieldset'][$i]["t_name"] != "") {
                    $testimonialquery = "
	INSERT INTO testimonials
	(w_id,body,name,department,university)
	VALUES
	(:w_id,:body,:name,:department,:university)
	";
                    $testimonialargs = array(
                        ":w_id" => $v["workshop_id"],
                        ":body" => $v['testimonial_fieldset'][$i]["t_body"],
                        ":name" => $v['testimonial_fieldset'][$i]["t_name"],
                        ":department" => $v['testimonial_fieldset'][$i]["t_department"],
                        ":university" => $v['testimonial_fieldset'][$i]["t_university"]
                    );
                    /* storing the row id in $result */
                    $testimonialresult = db_query($testimonialquery, $testimonialargs, array(
                        'return' => Database::RETURN_INSERT_ID
                    ));
                    if ($testimonialresult != 0) {
                        $testimonialupload++;
                    }
                }
            }
        }
        /* For editing Event images */
        /* For deleting existing images */
        $deletecounter = 0;
        $query_img = db_select('workshop_images');
        $query_img->fields('workshop_images');
        $query_img->condition('w_id', $v["workshop_id"]);
        $result_img = $query_img->execute();
        while ($row_img = $result_img->fetchObject()) {
            if ($form_state['values']['imagecheck@' . $row_img->id] == 1) {
                if (file_exists($row_img->path)) {
                    unlink($row_img->path);
                    $query2 = db_delete('workshop_images');
                    $query2->condition('id', $row_img->id);
                    $delete_img = $query2->execute();
                    if ($delete_img != 0) {
                        $deletecounter++;
                    }
                } else {
                    drupal_set_message('Error Could not delete : ' . $filename . ', file does not exist', 'error');
                }
            }
        }
        /* For adding more images to existing event */
        $items = array();
        $root_path = $_SERVER['DOCUMENT_ROOT'] . base_path() . 'events_images/';
        $eventfolder = str_replace(' ', '_', $v["name"]);
        $dest_path = $eventfolder . '/';
        if (!is_dir($root_path . $dest_path)) {
            mkdir($root_path . $dest_path);
        }
        /* uploading files */
        foreach ($_FILES['files']['name'] as $file_form_name => $file_name) {
            if ($file_name) {
                if (file_exists($root_path . $dest_path . $_FILES['files']['name'][$file_form_name])) {
                    drupal_set_message(t("Error uploading file. File !filename already exists.", array(
                        '!filename' => $_FILES['files']['name'][$file_form_name]
                    )), 'error');
                    return;
                }
                $imageupload = 0;
                /* uploading file */
                if (move_uploaded_file($_FILES['files']['tmp_name'][$file_form_name], $root_path . $dest_path . $_FILES['files']['name'][$file_form_name])) {
                    $imagequery = "
	INSERT INTO workshop_images
	(w_id,name,path)
	VALUES
	(:w_id,:name, :path)
	";
                    $imageargs = array(
                        ":w_id" => $v["workshop_id"],
                        ":name" => $_FILES['files']['name'][$file_form_name],
                        ":path" => $root_path . $dest_path . $_FILES['files']['name'][$file_form_name]
                    );
                    /* storing the row id in $result */
                    $imageresult = db_query($imagequery, $imageargs, array(
                        'return' => Database::RETURN_INSERT_ID
                    ));
                    if ($imageresult != 0) {
                        $imageupload++;
                    }
                    drupal_set_message($file_name . ' uploaded successfully.', 'status');
                } else {
                    drupal_set_message('Error uploading file : ' . $dest_path . $file_name, 'error');
                }
            }
        }
        if (!$result && $imageupload == 0 && $deletecounter == 0) {
            drupal_set_message("Something went wrong, please try again.", "error");
        } else {
            drupal_set_message("Workshop updated successfully", "status");
            if ($imageupload != 0) {
                drupal_set_message("Event's Pictures are added successfully", "status");
            }
            if ($deletecounter != 0) {
                drupal_set_message("Event's Pictures are deleted successfully", "status");
            }
        }
    } else {
        $query = "
	INSERT INTO workshop
	(foss_name,type,w_name, startdate, starttime,enddate, endtime, venue, street, country,state,city,pincode,no_of_participant,body)
	VALUES	(:foss_name,:type,:w_name, :startdate, :starttime,:enddate, :endtime, :venue, :street, :country, :state, :city, :pincode, 
:no_of_participant, :body)
	";
        $args = array(
            ":type" => $v["type"],
            ":foss_name" => $v["foss_select"],
            ":w_name" => $v["name"],
            ":startdate" => $v["start_date"],
            ":starttime" => "00:00",
            ":enddate" => $v["end_date"],
            ":endtime" => "00:00",
            ":venue" => $v["venue"],
            ":street" => $v["street"],
            ":country" => $v["country"],
            ":state" => $v["all_state"],
            ":city" => $v["city"],
            ":pincode" => $v["pincode"],
            ":no_of_participant" => $v["no_of_participant"],
            ":body" => $v["body"]
        );
        /* storing the row id in $result */
        $result = db_query($query, $args, array(
            'return' => Database::RETURN_INSERT_ID
        ));
        /* For adding speakers */
        $speakerupload = 0;
        for ($i = 0; $i <= $v["speakers_count"]; $i++) {
            if ($v['speakers_fieldset'][$i]["speakername"] != "") {
                $speakerquery = "
	INSERT INTO speakers
	(w_id,name,institute,place)
	VALUES
	(:w_id,:name,:institute,:place)
	";
                $speakerargs = array(
                    ":w_id" => $result,
                    ":name" => $v['speakers_fieldset'][$i]["speakername"],
                    ":institute" => $v['speakers_fieldset'][$i]["institute"],
                    ":place" => $v['speakers_fieldset'][$i]["place"]
                );
                /* storing the row id in $result */
                $speakerresult = db_query($speakerquery, $speakerargs, array(
                    'return' => Database::RETURN_INSERT_ID
                ));
                if ($speakerresult != 0) {
                    $speakerupload++;
                }
            }
        }
        /* For adding testimonial */
        $testimonialupload = 0;
        for ($i = 0; $i <= $v["testimonial_count"]; $i++) {
            if ($v['testimonial_fieldset'][$i]["t_name"] != "") {
                $testimonialquery = "
	INSERT INTO testimonials
	(w_id,body,name,department,university)
	VALUES
	(:w_id,:body,:name,:department,:university)
	";
                $testimonialargs = array(
                    ":w_id" => $result,
                    ":body" => $v['testimonial_fieldset'][$i]["t_body"],
                    ":name" => $v['testimonial_fieldset'][$i]["t_name"],
                    ":department" => $v['testimonial_fieldset'][$i]["t_department"],
                    ":university" => $v['testimonial_fieldset'][$i]["t_university"]
                );
                /* storing the row id in $result */
                $testimonialresult = db_query($testimonialquery, $testimonialargs, array(
                    'return' => Database::RETURN_INSERT_ID
                ));
                if ($testimonialresult != 0) {
                    $testimonialupload++;
                }
            }
        }
        /* For adding images of events*/
        $items = array();
        $root_path = $_SERVER['DOCUMENT_ROOT'] . base_path() . 'events_images/';
        $eventfolder = str_replace(' ', '_', $v["name"]);
        $dest_path = $eventfolder . '/';
        if (!is_dir($root_path . $dest_path)) {
            mkdir($root_path . $dest_path);
        }
        /* uploading files */
        foreach ($_FILES['files']['name'] as $file_form_name => $file_name) {
            if ($file_name) {
                if (file_exists($root_path . $dest_path . $_FILES['files']['name'][$file_form_name])) {
                    drupal_set_message(t("Error uploading file. File !filename already exists.", array(
                        '!filename' => $_FILES['files']['name'][$file_form_name]
                    )), 'error');
                    return;
                }
                $imageupload = 0;
                /* uploading file */
                if (move_uploaded_file($_FILES['files']['tmp_name'][$file_form_name], $root_path . $dest_path . $_FILES['files']['name'][$file_form_name])) {
                    $imagequery = "
	INSERT INTO workshop_images
	(w_id,name,path)
	VALUES
	(:w_id,:name, :path)
	";
                    $imageargs = array(
                        ":w_id" => $result,
                        ":name" => $_FILES['files']['name'][$file_form_name],
                        ":path" => $root_path . $dest_path . $_FILES['files']['name'][$file_form_name]
                    );
                    /* storing the row id in $result */
                    $imageresult = db_query($imagequery, $imageargs, array(
                        'return' => Database::RETURN_INSERT_ID
                    ));
                    if ($imageresult != 0) {
                        $imageupload++;
                    }
                    drupal_set_message($file_name . ' uploaded successfully.', 'status');
                } else {
                    drupal_set_message('Error uploading file : ' . $dest_path . $file_name, 'error');
                }
            }
        }
        if (!$result) {
            drupal_set_message("Something went wrong, please try again.", "error");
        } else {
            drupal_set_message("Workshop added successfully", "status");
            if ($imageupload != 0) {
                drupal_set_message("Event's Pictures are added successfully", "status");
            }
            if ($testimonialupload != 0) {
                drupal_set_message("Testimonials added successfully", "status");
            }
            if ($speakerupload != 0) {
                drupal_set_message("Speaker's Detail are added successfully", "status");
            }
        }
    }
}


function ajax_country_dependent_dropdown_callback($form, $form_state)
{
    $country = $form_state['values']['country'];
    $form['state']['#options'] = ajax_getstate_callback($country);
    $commands[] = ajax_command_replace("#dropdown-state-replace", drupal_render($form['state']));
    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}


function ajax_state_dependent_dropdown_callback($form, $form_state)
{
    $state = $form_state['values']['state'];
    $form['city']['#options'] = ajax_getcity_callback($state);
    $commands[] = ajax_command_replace("#dropdown-city-replace", drupal_render($form['city']));
    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}


function ajax_getstate_callback($country = '')
{
    $query = "
       SELECT Distinct (District) as state FROM City
       WHERE CountryCode =:country order by District
       ";
    $args = array(
        ":country" => $country
    );
    $result = db_query($query, $args);
    $options = array();
    while ($row = $result->fetchObject()) {
        $options[$row->state] = $row->state;
    }
    return $options;
}


function ajax_getcity_callback($state = '')
{
    $query = "
       SELECT Name as cityname FROM City
       WHERE District =:state order by Name
       ";
    $args = array(
        ":state" => $state
    );
    $result = db_query($query, $args);
    $options = array();
    while ($row = $result->fetchObject()) {
        $options[$row->cityname] = $row->cityname;
    }
    return $options;
}


function workshop_view_image_all($id = 0)
{
    $page_content = "";
    $query = db_select('workshop_images');
    $query->fields('workshop_images');
    $query->condition('id', $id);
    $result = $query->execute();
    $row1 = $result->fetchObject();
    $query = db_select('workshop');
    $query->fields('workshop');
    $query->condition('w_id', $row1->w_id);
    $result = $query->execute();
    $row = $result->fetchObject();
    $previous = ($row1->id) - 1;
    $page_content .= "<table class='tablew tablew-bordered tablew-hover' >" . $row1->name;
    $page_content .= "<tr><td><img style='width:550px; height:350px' src=" . $GLOBALS['base_url'] . "/events_images/" . str_replace(' ', '_', $row->w_name) . "/" . $row1->name . " /></td></tr>";
    $page_content .= "</table>";
    $page_content .= "<a href=" . $GLOBALS['base_url'] . "/events/images/change/" . $previous . " name=" . $row1->id . " id=" . $row1->id . "  class='autodialog' data-dialog-width='600px'>PREVIOUS</a>";
    return $page_content;
}


function workshop_view_selected_testimonial($id = 0)
{
    $page_content = "";
    $query = db_select('testimonials');
    $query->fields('testimonials');
    $query->condition('t_id', $id);
    $result = $query->execute();
    $row = $result->fetchObject();
    $page_content .= "<br><ul><li><i><p style='margin-top:-7px'>{$row->body}</i></p>
                                              <br>
						<br>
                                                <p style='text-align:right;margin-top:-30px'>{$row->name},{$row->department},</p>
                                                <p style='text-align:right;margin-top:-15px''>{$row->university}.</p>	
                                                </li><ul>";
    return $page_content;
}


function workshop_view_all_testimonials($workshop_id = 0)
{
    $page_content = "";
    /*$query = "
    SELECT * FROM testimonials
    ORDER BY id DESC
    ";
    $result = pager_query($query, 4, 0, "SELECT COUNT(*) FROM testimonials");*/
    $query = db_select('testimonials');
    $query->fields('testimonials');
    $query->condition('w_id', $workshop_id);
    $query->orderBy('t_id', 'DESC');
    $result = $query->extend('PagerDefault')->limit(4)->execute();
    $query1 = db_select('workshop');
    $query1->fields('workshop');
    $query1->condition('w_id', $workshop_id);
    $result1 = $query1->execute();
    $row1 = $result1->fetchObject();
    $page_content .= "<h2>Testimonials for " . $row1->w_name . " </h2>";
    $page_content .= "<div id='testimonials-wrapper'>";
    while ($row = $result->fetchObject()) {
        $page_content .= "
                <div class='testimonial'>
                    {$row->body}
                    <div class='author'>
                        - {$row->name}, {$row->department}, {$row->university}<br>
                       
                    </div>
                </div>
            ";
    }
    $page_content .= "</div> <!-- /#testimonials-wrapper -->";
    //$page_content .= theme("pager", NULL, 4, 0);
    $page_content .= theme('pager', array(
        'header' => NULL,
        'rows' => 4
    ));
    return $page_content;
}


function workshop_view_image_change($id = 0)
{
    $page_content = "";
    $query = db_select('workshop_images');
    $query->fields('workshop_images');
    $query->condition('id', $id);
    $result = $query->execute();
    $row1 = $result->fetchObject();
    $query = db_select('workshop');
    $query->fields('workshop');
    $query->condition('w_id', $row1->w_id);
    $result = $query->execute();
    $row = $result->fetchObject();
    $page_content .= "<table class='tablew tablew-bordered tablew-hover' >" . $row1->name;
    $page_content .= "<tr><td><img style='width:600px; height:500px' src=" . $GLOBALS['base_url'] . "/events_images/" . str_replace(' ', '_', $row->w_name) . "/" . $row1->name . " /></td></tr>";
    $page_content .= "</table>";
    return $page_content;
}


function delete_directory($dirname)
{
    if (is_dir($dirname))
        $dir_handle = opendir($dirname);
    if (!$dir_handle)
        return false;
    while ($file = readdir($dir_handle)) {
        if ($file != "." && $file != "..") {
            if (!is_dir($dirname . "/" . $file))
                unlink($dirname . "/" . $file);
            else
                delete_directory($dirname . '/' . $file);
        }
    }
    closedir($dir_handle);
    rmdir($dirname);
    return true;
}


function workshop_delete_all($workshop_id = 0)
{
    $page_content = "";
    $query = db_select('workshop');
    $query->fields('workshop');
    $query->condition('w_id', $workshop_id);
    $result = $query->execute();
    $row = $result->fetchObject();
    $root_path = $_SERVER['DOCUMENT_ROOT'] . base_path() . 'events_images/';
    $eventfolder = str_replace(' ', '_', $row->w_name);
    $dest_path = $eventfolder;
    $dir_path = $root_path . $dest_path;
    if (is_dir($dir_path)) {
        $res = delete_directory($dir_path);
        if (!$res) {
            drupal_set_message(t("Cannot delete Event directory : " . $dir_path . ". Please contact administrator."), 'error');
            return;
        } else {
            $query2 = db_delete('workshop_images');
            $query2->condition('w_id', $workshop_id);
            $result2 = $query2->execute();
        }
    } else {
        drupal_set_message(t("Event directory not present : " . $dir_path . ". Skipping deleting directory."), 'status');
    }
    $query_t = db_delete('testimonials');
    $query_t->condition('w_id', $workshop_id);
    $result_t = $query_t->execute();
    $query3 = db_delete('workshop');
    $query3->condition('w_id', $workshop_id);
    $result3 = $query3->execute();
    /* $query = "DELETE from sbhs_workshop 
    WHERE w_id = {$workshop_id}";
    $result = db_query($query,$workshop_id); */
    if (!$result3) {
        drupal_set_message("Something went wrong, please try again.", "error");
    } else {
        if (!$result2 && (!$result_t)) {
            drupal_set_message("Workshop Deleted successfully", "status");
        } else {
            drupal_set_message("Workshop, testimonials and related photos are Deleted successfully", "status");
        }
    }
    return $page_content;
}


function workshop_edit_all($workshop_id = 0)
{
    $page_content = "";
    if ($workshop_id) {
        $workshop_add_form = drupal_get_form("workshop_add_form", $workshop_id);
        $page_content = drupal_render($workshop_add_form);
    } else {
        $query = db_select('workshop');
        $query->fields('workshop');
        $query->orderBy('startdate', 'DESC');
        $result = $query->execute();
        $headers = array(
            "Name",
            "Start Date",
            "Venue",
            "No of Participant",
            ""
        );
        $rows = array();
        $options = array(
            'attributes' => array(
                'class' => 'delete'
            )
        );
        while ($row = $result->fetchObject()) {
            $item = array(
                $row->w_name,
                $row->startdate,
                $row->venue,
                $row->no_of_participant,
                l("Edit", "events/edit/{$row->w_id}") . " | " . l("Delete", "events/delete/{$row->w_id}", $options)
            );
            array_push($rows, $item);
        }
        $page_content = bootstrap_table_format($headers, $rows);
    }
    return $page_content;
}


function events_view_filter($foss_name, $event_type, $startdate, $enddate, $countryname, $statename, $cityname)
{
    
    $page_content = "";
    $headers = array(
        "Name",
        "Start Date",
        "Venue",
        "No of Participants",
        ""
    );
    if ($startdate == "") {
        $startdate = '1960-01-01';
    } else {
        $startdate = $startdate;
    }
    
    if ($enddate == "") {
        $enddate = date("Y-m-d");
        //$enddate = "";
    } else {
        $enddate = $enddate;
    }
    
    if (trim($countryname) == "0") {
        $countryname = '%';
    } else {
        $countryname = trim($countryname);
    }
    
    if (trim($statename) == "0") {
        $statename = '%';
    } else {
        $statename = trim($statename);
    }
    
    if (trim($cityname) == "0") {
        $cityname = '%';
    } else {
        $cityname = trim($cityname);
    }
    
    
    $rows = array();
    $query = db_select('workshop');
    $query->fields('workshop');
    $query->condition('type', $event_type);
    $query->condition('foss_name', $foss_name);
    $query->condition('state', $statename, 'LIKE');
    $query->condition('city', $cityname, 'LIKE');
    $query->condition('startdate', $startdate, '>=');
    $query->condition('startdate', $enddate, '<=');
    $query->orderBy('startdate', 'DESC');
    $result = $query->execute();
    while ($row = $result->fetchObject()) {
        $item = array(
            $row->w_name,
            $row->startdate,
            $row->venue,
            $row->no_of_participant,
            "<a href=" . $GLOBALS['base_url'] . "/events/view_details/{$row->w_id} target='_blank' title='Click to view detail'>Details</a>"
        );
        array_push($rows, $item);
    }
    $page_content .= bootstrap_table_format($headers, $rows);
    //var_dump($rows);
    //die;
    return $page_content;
}


function workshop_view_all($workshop_id, $startdate, $enddate)
{
    if ($startdate == "") {
        $startdate = "2015-08-01";
    } else {
        $startdate = $startdate;
    }
    if ($enddate == "") {
        $enddate = date("Y-m-d");
        //$enddate="";
    } else {
        $enddate = $enddate;
    }
    $page_content = "";
    $headers = array(
        "Name",
        "Start Date",
        "Venue",
        "No of Participants",
        ""
    );
    /*$query2=db_query("SELECT * FROM workshop WHERE type ='Workshop' AND startdate >= :startdate AND startdate <= :enddate ", array(':startdate'=>$startdate,':enddate'=>$enddate));*/
    $rows1 = array();
    $query1 = db_select('workshop');
    $query1->fields('workshop');
    $query1->condition('type', "Workshop");
    $query1->condition('startdate', $startdate, '>=');
    $query1->condition('startdate', $enddate, '<=');
    $query1->orderBy('startdate', 'DESC');
    $result1 = $query1->execute();
    while ($row = $result1->fetchObject()) {
        $item = array(
            $row->w_name,
            $row->startdate,
            $row->venue,
            $row->no_of_participant,
            // "<a href='events/view_details/{$row->w_id}' class='autodialog' data-dialog-width='700' title='Click to view detail'>View</a>",
            "<a href=" . $GLOBALS['base_url'] . "/events/view_details/{$row->w_id} target='_blank' title='Click to view detail'>Details</a>"
        );
        array_push($rows1, $item);
    }
    $page_content .= bootstrap_table_format($headers, $rows1);
    return $page_content;
}


function conference_seminar_view_all($workshop_id, $startdate, $enddate)
{
    $page_content = "";
    $headers = array(
        "Name",
        "Start Date",
        "Venue",
        "No of Participants",
        ""
    );
    $rows1 = array();
    $query1 = db_select('workshop');
    $query1->fields('workshop');
    $query1->condition('type', "Conference/Seminar");
    $query1->orderBy('startdate', 'DESC');
    $result1 = $query1->execute();
    while ($row = $result1->fetchObject()) {
        $item = array(
            $row->w_name,
            $row->startdate,
            $row->venue,
            $row->no_of_participant,
            // "<a href='events/view_details/{$row->w_id}' class='autodialog' data-dialog-width='700' title='Click to view detail'>View</a>",
            "<a href=" . $GLOBALS['base_url'] . "/events/view_details/{$row->w_id} target='_blank' title='Click to view detail'>Details</a>"
        );
        array_push($rows1, $item);
    }
    $page_content .= bootstrap_table_format($headers, $rows1);
    return $page_content;
}


function workshop_view_details_all($workshop_id = 0)
{
    $testimonial_scroll_js = "(function ($) {
$(document).ready(function(){
	
	$('#testimonials_front li').hide().eq(0).show();
	
	(function showNextTestimonial(){
		
		$('#testimonials_front li:visible').delay(12000).fadeOut('slow',function(){
			$(this).appendTo('#testimonials_front ul');
			if($(this).next().length > 0)
				{
				$(this).next().fadeIn('slow',function(){
					showNextTestimonial();
					});
				}
			else
				{
				$(this).siblings(':first').fadeIn('slow',function(){
					showNextTestimonial();
					});
				}
		});
	})();
	
});
})(jQuery);";
    drupal_add_js($testimonial_scroll_js, 'inline', 'header');
    $page_content = "";
    $row = "";
    $row1 = "";
    $query = db_select('workshop');
    $query->fields('workshop');
    $query->condition('w_id', $workshop_id);
    $result = $query->execute();
    $row = $result->fetchObject();
    $speakerquery = db_select('speakers');
    $speakerquery->fields('speakers');
    $speakerquery->condition('w_id', $workshop_id);
    $speakerresult = $speakerquery->execute();
    $textdisplay = "";
    $counter = 1;
    while ($speakerrow = $speakerresult->fetchObject()) {
        $var = $counter++;
        $textdisplay .= "<p>" . $var . ". " . $speakerrow->name . " <sub class='subclass'>" . $speakerrow->institute . ", " . $speakerrow->place . "</sub></p>";
    }
    //$starttime= strftime('%I:%M %p', strtotime($row->starttime));
    //$endtime= strftime('%I:%M %p', strtotime($row->endtime));
    $startdate = $row->startdate;
    $enddate = $row->enddate;
    $date = $row->startdate . " , " . $row->enddate;
    //$date1=date_create($row->startdate);
    //$date2=date_create($row->enddate);
    //$diff=date_diff($date1,$date2);
    //$date1=date_create($row->startdate);
    //$date2=date_create($row->enddate);
    //$diff=date_diff($date1,$date2);
    //$duration= $diff->format("%a");
    $daylen = 60 * 60 * 24;
    $date1 = $row->enddate;
    $date2 = $row->startdate;
    //echo (strtotime($date1)-strtotime($date2))/$daylen;
    $dayCount = ((strtotime($date1) - strtotime($date2)) / $daylen) + 1;
    //$time=$starttime." - ".$endtime;
    $page_content .= "<table class='table table-bordered table-hover' >";
    $page_content .= "<tr><td><b>Name</b></td><td>{$row->w_name}</td></tr>";
    $page_content .= "<tr><td><b>Start Date</b></td><td>$startdate</td></tr>";
    $page_content .= "<tr><td><b>End Date</b></td><td>$startdate</td></tr>";
    $page_content .= "<tr><td><b>No. of Participants</b></td><td>{$row->no_of_participant}</td></tr>";
    $page_content .= "<tr><td><b>Venue</b></td><td>{$row->venue}</td></tr>";
    $page_content .= "<tr><td><b>Speakers</b></td><td>$textdisplay</td></tr>";
    $page_content .= "<tr><td><b>Description</b></td><td>{$row->body}</td></tr>";
    $query = db_select('workshop_images');
    $query->fields('workshop_images');
    $query->condition('w_id', $workshop_id);
    $result = $query->execute();
    $num_of_results = $result->rowCount();
    if ($num_of_results != 0) {
        $page_content .= "<tr><td><b>Pictures</b></td><td>";
        while ($row1 = $result->fetchObject()) {
            $page_content .= "<a class='fancybox' rel='gallery1' href=" . $GLOBALS['base_url'] . "/events_images/" . str_replace(' ', '_', $row->w_name) . "/" . $row1->name . "><img style='width:100px; height:100px; padding-right:20px;padding-bottom:10px' src=" . $GLOBALS['base_url'] . "/events_images/" . str_replace(' ', '_', $row->w_name) . "/" . $row1->name . " /></a>";
        }
        $page_content .= "</td></tr></table>";
    } else {
        $page_content .= "</table>";
    }
    $query = db_select('testimonials');
    $query->fields('testimonials');
    $query->condition('w_id', $workshop_id);
    $query->orderBy('t_id', 'DESC');
    $result = $query->execute();
    $num_of_results = $result->rowCount();
    if ($num_of_results != 0) {
        if ($num_of_results > 1) {
            $page_content .= "<div id='testimonials_front'><div><br>
<a href=" . $GLOBALS['base_url'] . "/events/testimonials/{$workshop_id} target='_blank' title='Click to view all testimonials'><h4 style='color:#3399FF'>Testimonials</h4></a>
<br></div><ul>";
            $page_testimonial = "";
            while ($row = $result->fetchObject()) {
                if (strlen($row->body) >= 1) {
                    if (strlen($row->body) >= 260) {
                        $cut1 = substr($row->body, 0, 200);
                        $cut = $cut1 . "  ...   ";
                        $page_testimonial = "<li><i><p style='margin-top:-7px'>{$cut}</i><a href=" . $GLOBALS['base_url'] . "/events/testimonials/view/" . $row->t_id . " name=" . $row1->t_id . " id=" . $row1->t_id . "  class='autodialog' title='Click to read more'>Read more</a></p>
                                              <br>
                                                <p style='text-align:right;margin-top:-30px'>{$row->name},{$row->department},</p>
                                                <p style='text-align:right;margin-top:-15px''>{$row->university}.</p>	
                                                </li>";
                    } else {
                        $page_testimonial = "<li><i><p style='margin-top:-7px'>$row->body</i></p>
                                              <br>
                                                <p style='text-align:right;margin-top:-30px'>{$row->name},{$row->department},</p>
                                                <p style='text-align:right;margin-top:-15px''>{$row->university}.</p>	
                                                </li>";
                    }
                }
                $page_content .= $page_testimonial;
            }
            $page_content .= "</ul></div>";
        } else {
            $page_content .= "<div id='testimonials_one'><div><br>
<a href=" . $GLOBALS['base_url'] . "/events/testimonials/{$workshop_id} target='_blank' title='Click to view all testimonials'><h4 style='color:#3399FF'>Testimonials</h4></a>
<br></div><ul>";
            $page_testimonial = "";
            while ($row = $result->fetchObject()) {
                if (strlen($row->body) >= 1) {
                    if (strlen($row->body) >= 260) {
                        $cut1 = substr($row->body, 0, 200);
                        $cut = $cut1 . "  ...   ";
                        $page_testimonial = "<li><i><p style='margin-top:-7px'>{$cut}</i><a href=" . $GLOBALS['base_url'] . "/events/testimonials/view/" . $row->t_id . " name=" . $row1->t_id . " id=" . $row1->t_id . "  class='autodialog' title='Click to read more'>Read more</a></p>
                                              <br>
                                                <p style='text-align:right;margin-top:-30px'>{$row->name},{$row->department},</p>
                                                <p style='text-align:right;margin-top:-15px''>{$row->university}.</p>	
                                                </li>";
                    } else {
                        $page_testimonial = "<li><i><p style='margin-top:-7px'>$row->body</i></p>
                                              <br>
                                                <p style='text-align:right;margin-top:-30px'>{$row->name},{$row->department},</p>
                                                <p style='text-align:right;margin-top:-15px''>{$row->university}.</p>	
                                                </li>";
                    }
                }
                $page_content .= $page_testimonial;
            }
            $page_content .= "</ul></div>";
        }
    }
    return $page_content;
}


function _list_of_states()
{
    $states = array(
        0 => '-Select-'
    );
    $query = db_select('list_states_of_india');
    $query->fields('list_states_of_india');
    $states_list = $query->execute();
    while ($states_list_data = $states_list->fetchObject()) {
        $states[$states_list_data->state] = $states_list_data->state;
    }
    return $states;
}


function _list_of_cities()
{
    $city = array(
        0 => '-Select-'
    );
    $query = db_select('list_cities_of_india');
    $query->fields('list_cities_of_india');
    $query->orderBy('city', 'ASC');
    $city_list = $query->execute();
    while ($city_list_data = $city_list->fetchObject()) {
        $city[$city_list_data->city] = $city_list_data->city;
    }
    return $city;
}


function fossee_stats_init()
{
    $path = drupal_get_path('module', 'fossee_stats');
    drupal_add_js($path . '/js/all_charts.js');
    drupal_add_css(drupal_get_path("module", "fossee_stats") . "/css/fossee_stats_base.css");
    drupal_add_css(drupal_get_path("module", "fossee_stats") . "/css/fossee_stats_main.css");
    drupal_add_js(drupal_get_path("module", "fossee_stats") . "/js/confirm.js");
    drupal_add_js(drupal_get_path("module", "fossee_stats") . "/js/testimonials_script.js");
}
